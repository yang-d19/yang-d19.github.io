{"posts":[{"title":"2021秋-学期总结","text":"这是我的第一篇学期总结相关的日志，大三的第一个学期已经结束，既充实又痛苦，写点东西纪念一下。之后应该每个学期都会写一篇。如果读研的话，学期总结的日志系列应该也会继续。 1、学习最可惜的是自控，期中考得太差了，期末发挥还不错。前半学期的内容比较讨厌，尽是些近似的方法和好多奇怪的判据，后半学期的基本就是线性代数，除了计算没什么头疼的。 数值分析的话意料之中地炸，不过确实既不感兴趣也学不明白，以后应该也用不到了。 其它必修课基本是正常发挥，人智有一点可惜，搞了半学期的强化学习结果考试的时候连马尔科夫决策过程也没算得出来。 走进医学给了 A+ 我是没想到的，学的很认真也很开心。 并行处理器居然是 PF 课，早知道就不花那么多时间准备了，复习这门课的考试还耽误了写中国历史地理的大论文，巨亏。 数图，直接退课跑路，喜提一个 W 2、科研继续努力打工吧，希望能混一篇论文/推荐信。 3、社工团支书本来就不是我的工作重点，把该办的几个活动正常地办完就达到我的预期了，总体来说还是正常开展的。挺佩服某些大神的，成绩好还有很多精力把班干部的事情干得很好。 4、实习21年暑假去了字节的夏令营，22年暑假想换个口味，看看外企的工作风格。报了微软和谷歌的暑期实习，过一个就算成功。M和G家不过的话，就再试试 BT 和 TX 吧。 5、总结总的说，取其上，得其中。付出了很多努力，熬夜熬到心脏疼，凌晨写作业赶 DDL 不知道多少次了。这个学期绩点还算能看，但科研还是没有成果。 人的精力是有限的，T大的内卷是无限的。很累很痛苦，但又不甘心躺平，加油干吧。","link":"/2021%E7%A7%8B-%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/"},{"title":"2022春-学期总结","text":"这是自从开始写博客以来的第二篇学期总结日志，前些日子边忙实习，边考英语，不知不觉暑假都快结束了，赶紧把学期总结补一下。 1、学习选了两门计算机系的挺硬的专业课，操作系统和计算机组成结构。花了挺多时间，收获还是不小的。OS 课程实验是用 rust 在助教给的类 Unix 内核的 demo 上实现一些功能，rust 真的是一门令人兴奋的语言，设计理念和写起来的感觉都很酷；计组课上完成了大名鼎鼎的 CSAPP 的多个 Lab，只能说不愧是 CMU 的标杆课程，实验设计的非常有水平，强烈建议有时间的话不要看参考答案，尝试完全靠自己攻克这些 Lab，会很有收获。 过控，很难说这课好还是不好，实验有点意思，但是不多，部分作业设计的比较无语，不就是摘抄PPT吗。好在给分不错，适合抱佛脚。 数字视频，讲课水平只能说一言难尽，作业认真做的话也算有点收获，但是不多。基本是靠最后的大作业拿分的，小组同学都挺给力的，加上我毕生的 latex 功力，卷了大十几页报告，拿到了不错的分数。 习概毛概，张维老师的讲课水平和给分都挺好。 模式识别，大硬课，很多 project，需要花时间认真学，还是有收获的，不过我记了 PF，最后的大 project 一天水过，室友对我的码代码速度表示震惊 O(∩_∩)O。 词汇的力量，外语硬课，需要背很多课文，看英文小说，写 summary。王老师是我见过备课最认真的老师，给分也好。 运筹，课和老师都没有问题，还是我太菜了，没时间上这么多课，退课跑路，喜提一个 W。 台球，就是玩，很舒服。 2、科研无 3、社工团支书生涯结束了，甲团评比有点可惜。回想起来还有挺多可以做的更好的地方。 4、实习找实习找得不太顺利，我的方向学得太杂，软件硬件算法都会一点，但是没有特别精通，不敢投算法岗，深感统计学水平有待提高。软件硬件都投了不少家。 总的来说，TX喜欢考八股文，BT算法题最难，AL喜欢问项目经验。几家外企都不怎么问八股文。EA的面试官没怎么问问题，反而跟我讲了很多游戏开发的 pros &amp; cons，带点劝退的意思，大概是我体验过的最奇怪的面试。 Intel 面试感觉很合适，以为稳了的，可惜最后被告知组里没名额了。 最后从 HW 和 Airwallex 中选了后者，毕竟之后打算出去读研嘛，而且跟面我的 Leader 挺谈得来的。 5、总结依旧是一个挺累的学期，也算收获了不少，大三生活结束了，GPA 时代也落下帷幕。 在知乎上看到一句很喜欢的话，就以它做结吧： Set your course by the stars, not by the lights of every passing ship. ——Omar N. Bradley","link":"/2022%E6%98%A5-%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/"},{"title":"2023秋-学期总结","text":"大四是倦怠的一年，不出所料地鸽了一年的学期总结。立个 flag，从这学期开始不鸽学期总结了。2023 年秋季是我来到康奈尔的第一个学期。茫茫往事似烟雾，记忆比烟更轻，思绪却比雾更浓。遇到了很多事，感觉自己却还像个小孩。向前看，向上走。 杂记初印象初到伊萨卡是个阴天，微湿的的空气呼吸起来很舒服，山清水秀，一派田园牧歌的风光。第一天上课刻意走了一条小路，跨过轰隆作响的瀑布上的小木桥，沿着山路拾级而上，目力所及全是翠绿色。伊萨卡的自然风光的确不错，有点世外桃源的意思。 最开始的几天总是很忙，各种讲座，Orientation，打疫苗，办手机卡、银行卡。打完疫苗之后发高烧，浑身疼，待到能爬起来时已是某天深夜，问室友要了一包方便面（也是他带过来的最后一包），简单地煮了煮。吃进嘴里的那一瞬，就像给还剩百分之五电量的手机插上充电线，“咚”的一声轻响，续上了命。倒时差也很痛苦，总是在深夜醒来，头一次感觉夜的时间如此漫长，窗外似乎多久都不会变亮。待到安定下来，已经是一个星期之后了。 Ithaca college town 有一条河，名字叫 Cascadilla Creek，景色非常好，尤其在夏末，空气不再燥热，从树荫底下可以看到透过树叶洒下来的阳光，流水和瀑布声恰到好处，不算很吵。溪水清澈见底，还可以走到缓坡的河床上，把手探进水里，感受水流的脉动。 某个周末还搭同学的汽车去了 Cayuga Lake 边的一处公园 Stewart Park 来了一次纯正的美式烧烤。等到搭好烧烤架，准备好食材，天已经黑了，湖边长着一人多高的草，隐在黑暗中摇曳。风很大，好处是完全没有蚊虫叮咬。天幕上繁星点缀，烤炉里火星飞溅。牛肉烤的太多了，吃到最后甚至有点恶心。 波士顿秋假4日波士顿游，蹭朋友的车，住在朋友的亲戚家，最省钱的一集，相当于只花了吃饭的钱。 波士顿是我在美国去过的最优雅的城市，非常干净整洁，天蓝得像洗过一样。海鲜也很好吃，龙虾卷、巧达汤、生蚝、鳕鱼，太多太多了，红酒威士忌每晚畅饮，真是神仙日子。 只去了 MIT，没去成 Harvard。MIT 的建筑风格属实一般，欣赏不来。MIT 门前的 Charles River 很好看，河水透出一种黑色的冷光，看久了总有种沁人心肺的冷感，虽然气温不算低。xk 说我总是会莫名其妙地盯着河水陷入沉思。我们 INTP 人就是这样的，我可以随时随地面对任何物体陷入沉思。 洛杉矶最说走就走的旅行，完全没有预料到会在 Thanksgiving Break 去 LA。 LA 和 Boston 都非常好玩，气质却完全不同。如果说 Boston 的气质是优雅，那么 LA 的气质就是自由。整个城市都颇有种活力感，真是个旅游的好地方。 天文台赏月、乘船出海钓鱼、半夜开车上穆赫兰道欣赏LA夜景…，不知从何处总结起，每一天似乎都有数不清的回忆，结识了几位人很好的朋友。 钓鱼真的很好玩，终于理解为什么钓鱼佬为啥那么上瘾了。钓了四条石斑鱼，不过有两条因为太小被放生了。 “这座城市忽明忽暗”，很贴切。LA 的市区是扁平状的，城市的灯火宛如繁星，由于冷热气流的作用，整座城市的灯光仿佛都在闪烁。 佛罗里达奥兰多3天迪士尼+环球影城。好玩是好玩，不过也只是模式化的好玩，没有太多值得记录的。 迈阿密的海滩很好看，到处都是棕榈树，如果天气好的话我可以在沙滩上躺一整天。 去 Key West 的那天下大暴雨，体验糟透了，传说中南海岸最美的风景完全没见到，天空和海水都灰沉沉的，街道仿佛都掉了色，蒙了灰。街上全是水，即便撑着伞，雨滴也把膝盖以下的裤子和鞋完全浸湿了，寸步难行，只能打车回大巴集结点。天公不作美。 再立一个 flag，之后一定要挑个阳光明媚的日子，租车自驾去 Key West 玩一圈。 纽约我之于纽约，亦是匆匆过客。 时代广场，帝国大厦；浮光掠影，走马观花。 第一次坐纽约地铁就逃票，看来我已经是个成熟的 Newyorker 了。 广州之旅好吃的真的多。各种街头巷尾的老店，或是装潢优雅的米其林餐厅，雅俗共赏，总有你满意的口味。在这里吃到了最好吃的榴莲酥，还有真的放在椰子壳里烤的椰子鸡，那叫一个地道。不过我个人不太爱吃肠粉。 去的那几天总有雾霾，白天拍照总是灰蒙蒙的。珠江夜景出乎我的意料，两岸的灯光秀很精彩。 学习后续可能会整理一下课程 project 的视频分享出来。 ECE 5730 Microcontroller Design Hunter 真是个好老师，非常有热情，深入浅出，Lab也很给力。 ECE 5725 Embedded Operating System Joseph 真是个好人，讲课也就那样，听不听关系不大，不过人是真的热情。 Intelligent 3D LED Smart Alarm Clock 找工投了 160 多份简历，收到 3 家面试： StoneX: 做金融服务业的，但不支持身份，原话：We are unable to provide an work authorization (CPT/OPT) or visa sponsorship。所以最终没有参加面试 Weride: 做自动驾驶的初创公司，正在融资上市。先拿到了实习 offer，后来又加面了 1 轮（本来说是 2 轮，HR 说反馈很好，省去了 head 面）拿到了全职 offer Apple: 面试发的贼晚，两轮后没有动静了，感觉被拿来刷 KPI 了","link":"/2023%E7%A7%8B-%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/"},{"title":"2024 年度回顾","text":"提笔时已是 2025 年的第 五 七 个月了，很遗憾，上次写总结时立的 flag 还是没保持住，我又又又鸽了。无妨，这倒也说明我过去一年过得还算充实，不需要回忆也可以不感到空虚。 长篇大论未免过于矫情，况且整整一年的事，千头万绪，难以找到纲领做结构化的归类整理。所以这篇总结我打算选取十几张我最喜欢的照片，作为线索，讲一讲照片背后的那些故事。 我的旅程广州 图为某家意式的下午茶。广州的空气不算好，雾蒙蒙的，夕阳光照过来，摩天大楼都笼着一层灰黄的纱。完全不记得这家的味道了，只记得店老板是个看起来蛮凶的光头外国人，一直在打电话。 寒假去拜访 Leo，我和老孟像两个新兵蛋子，被带上大佬们的酒局。第一次尝高端茅台，跟我之前喝过的白酒完全是两个样子，又醇又香，一点不辣嗓子。 坐船夜游珠江很有意思。大大小小的游船交织在水面，两岸的高楼幕墙上投影着绚丽的动画，有些画面甚至跨越了三四栋大厦联动，听说广州有专门的部门负责管理这些灯光效果。 碳化红薯 图为烤成焦炭的红薯。当你忘记给烤箱定时就把红薯放进去，会发生什么呢？外层的焦炭很像糖分渗出后再高温下焦化的产物，内层的肉看着倒还正常，不过我没敢吃。 九个圣杯 去纽约一座山里的寺庙求签，名字叫大成寺。恰逢大雪封山，伊萨卡大山村银装素裹，强如四驱的奥迪 SUV 也在路上两次打滑。大成寺的规模按照国内的标准不太够看，但是大雄宝殿、斋饭餐厅、财神殿、罗汉堂等齐全，在美国也算是稀有。 抽了一根签，想问一问 H1B 抽签的运势，结果连续重掷了六七次笅杯都是两阳或者两阴。最后一次才是圣杯，跟陈桂林倒是反着来了。 “我跟关圣帝君请示过，当天祂给我九个圣杯。如果我枪里接下来九发子弹都卡弹，我走。如果没有，那就是天意，那就是上天惩罚你玩弄苍生。” ——《周处除三害》 【灵签诗文】 茂林松柏正兴旺。雨雪风霜总莫为。异日忽然成大用。功名成就栋梁材。 【吉凶】 上上签 【宫位】 丑宫 【诗意】 此卦松柏茂林之象，凡事有贵气也。 【解曰】 路上亨通 终身有功 田蚕丰熟 家道兴隆 湖边夜色 春天的伊萨卡最是温柔。雪早已消融，暑气还未降下，水边的草色青青，垂柳的枝条摇曳。目力所能及的每一块区域都向你诉说着生活的美好。风不似秋夜的狂乱，气候又舒适宜人，最是烤肉的好时节。 湖边的长椅上，恋爱的酸臭味在弥漫。远处有人在划浆板，远近呼应，真是如画的景色。 一号公路 Road Trip带爸妈从旧金山的金门大桥出发，一路向南进发，直抵洛杉矶。再向东开到沙漠里的拉斯维加斯，最后向北开往优胜美地，打道回府。 半月湾的风浪很大，景色也很好。很久没拍过爸妈的合影，这张还不错。（忽略因为风而略显凌乱的头发） 天高任鸟飞！这张的阳光超绝，浪花的亮度快要溢出了，海鸟们排着整齐的队略过头顶，相机镜片反射的特殊的六边形光晕在天空的背景板上散开，大晴天的 17 mile drive 超级好看。后来阴天去过一次，缺少了阳光的加成，美丽程度大打折扣。 六月初的优胜美地，取景地是经典的 tunnel view。远远地透出一角的半圆形山峰是 half dome。 优胜美地东边的大平原。连绵的群山阻挡了来自大洋的水汽，形成高山积雪，促成了优胜美地这样的自然奇观。远处的高山和近处的旷野，仿佛让人置身开放世界的游戏里。 蓝宝石湖泊 Tahoe 清澈如蓝宝石的湖水、棉白色的浪花，Tahoe 最令我称奇的地方在于别的海湾或者湖泊多少会有些水腥味，像是在烈日下暴晒过的海藻的气息，但是 Tahoe 完全没有这种味道，干净的像过了一遍滤水器。因为是湖沙，沙子的颗粒略大，有些硌脚。但是我很喜欢这种粗砂的质感，把拖鞋踢到一旁，光脚在沙滩上漫步，让浪花冲刷到脚背又从脚趾缝隙间流走，湖水的律动仿佛和心跳同步起来，水汽侵入肺中，带走一身的疲惫。 落日时分，远山的剪影和被晕染上一层薄金红色余晖的云彩。在这里呆半天能除去一个月的班味。想念 Tahoe 的澄清湖水。 Trojan Point 云海 金门大桥北边开半个多小时，可以抵达观景点。太平洋的水汽凝结成云雾，在山边脚下翻滚着变换形态，很是壮观。 云海+落日也是一绝。 赶海 十月中旬，正好是西岸的潮水水位最低的时候，赶海地点在 Mavericks Beach，湾区西海岸凸出来的一块海角，半月湾的北边。收获了好多青口、海胆，甚至还有四五只超大的螃蟹，幸好同事带了一只很厚的橡胶手套，不然面对张牙舞爪的大螃蟹还真是无从下手。 重返清华毕业之后，时隔一年半再次回到清华访友。 紫荆食堂二层的海南鸡饭一绝！紫一的上海风味也很经典，烧腊也好吃。总之紫荆食堂没啥不好吃的菜。这两大盘加起来五十多块钱，在学校食堂绝对属于超级奢侈的一顿大餐。 总结2024年，我完成了从学生到打工人的身份转变。好像长大了又好像从来没有长大过。到底要追求什么呢，什么是珍贵的？","link":"/2024-%E5%B9%B4%E5%BA%A6%E5%9B%9E%E9%A1%BE/"},{"title":"使用 Anaconda 配置《机器学习实战》中的 Tensorflow 环境","text":"最近打算利用假期时间学习《机器学习实战》（第二版）这本书，于是先从 GitHub 上下载了本书的源代码示例 (https://github.com/ageron/handson-ml2) ，按照 README.md 的指示用 anaconda 安装 tf2 环境，但是出了一些问题，花了很久才搞定，下面是踩过的坑的记录。 首先按照 README.md 中 conda env create -f environment-windows.yml 尝试自动安装环境，但是安装了一部分包之后会报错CondaEnvException: Pip failed，猜测应该是 anaconda 自己调用的 pip 出错了。 打开 environment-windows.yml 文件，内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556name: tf2channels: - conda-forge - defaultsdependencies: - graphviz - imageio=2.6.1 - ipython=7.10.1 - ipywidgets=7.5.1 - joblib=0.14.0 - jupyter=1.0.0 - matplotlib=3.1.2 - nbdime=1.1.0 - nltk=3.4.5 - numexpr=2.7.0 - numpy=1.17.3 - pandas=0.25.3 - pillow=6.2.1 - pip - py-xgboost=0.90 - pydot=1.4.1 - pyopengl=3.1.3b2 - python=3.7 - python-graphviz - requests=2.22.0 - scikit-image=0.16.2 - scikit-learn=0.22 - scipy=1.3.1 - tqdm=4.40.0 - wheel - widgetsnbextension=3.5.1 - pip: #- atari-py==0.2.6 # NOT ON WINDOWS YET - ftfy==5.7 - gym==0.15.4 - opencv-python==4.1.2.30 - psutil==5.6.7 - pyglet==1.3.2 - spacy==2.2.4 - tensorboard==2.1.1 #- tensorflow-addons==0.8.3 # NOT ON WINDOWS YET #- tensorflow-data-validation==0.21.5 # NOT ON WINDOWS YET - tensorflow-datasets==2.1.0 - tensorflow-estimator==2.1.0 - tensorflow-hub==0.7.0 #- tensorflow-metadata==0.21.1 # NOT ON WINDOWS YET #- tensorflow-model-analysis==0.21.6 # NOT ON WINDOWS YET - tensorflow-probability==0.9.0 - tensorflow-serving-api==2.1.0 # or tensorflow-serving-api-gpu if gpu #- tensorflow-transform==0.21.2 # NOT ON WINDOWS YET - tensorflow==2.1.0 # or tensorflow-gpu if gpu - tf-agents==0.3.0 #- tfx==0.21.2 # NOT ON WINDOWS YET - transformers==2.8.0 - urlextract==0.13.0 #- pyvirtualdisplay # add if on headless server 又打开 Anaconda Navigator，点开tf2环境，发现除了 - pip: 以下的所有包都安装好了，确定是 pip 的问题，于是决定手动安装 pip 的包。 将 environment-windows.yml 中 - pip: 以下的内容拷贝到了一个新建的文本文件 pip.txt 中（删除每行前缀的-和以#开头的注释）之后，pip.txt 内容如下： 123456789101112ftfy==5.7gym==0.15.4opencv-python==4.1.2.30psutil==5.6.7pyglet==1.3.2spacy==2.2.4tensorboard==2.1.1tensorflow-datasets==2.1.0tensorflow-estimator==2.1.0tensorflow-hub==0.7.0tensorflow-probability==0.9.0tensorflow-serving-api==2.1.0 在 pip.txt 所在的文件夹打开命令行，输入 activate tf2 切换环境，再输入 pip install -r pip.txt 安装所需的库，发现还是报错，前几行是 1234Traceback (most recent call last): File &quot;...\\resolvers.py&quot;, line ..., in _merge_into_criterion crit = self.state.criteria[name]KeyError: '...' 这样的错误，完全不知道为什么，而且多次尝试安装，错误信息中 KeyError 后面的字每次还都不一样，就毫无头绪。 然后看到了一篇博客 https://blog.csdn.net/qq_43290288/article/details/113444707 ，给了我启发，从错误信息的后面一段可以看到 socket.timeout 和 Read timed out 之类的错误，猜测是网络问题，于是我改了 pip 的源（顺手把 conda 的源也改成清华的了），并且切换 WIFI 为 手机热点，再试了一遍，终于成功了。 切换 pip 源的方法：https://mirror.tuna.tsinghua.edu.cn/help/pypi/ 切换 conda 源的方法：https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/ 其实应该不需要像我刚刚那样折腾，理论上直接把 conda 和 pip 的源换成 tuna 的，然后 WIFI 换成热点就可以了，但谁能一开始就想到是网速不够的原因呢。","link":"/Anaconda%E9%85%8D%E7%BD%AE%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%E3%80%8BTensorflow%E7%8E%AF%E5%A2%83/"},{"title":"Codeforces 题解 1553B [Reverse String]","text":"【题目大意】 给定字符串 s，给出一个由 s 生成新字符串 t 的方法 M：将指针 p 放在 s 的某一位上，然后将 p 向右移动若干次，再向左移动若干次（p 始终指向 s 中的字符），p 指到的所有字符排列成一个新字符串 t。例如 s 为 abcdef，p 初始为 2（即指向 c），向右移动 2 次，向左移动 3 次，生成的 t 为 cdedcb。现给出若干组 s 和 t，判断 t 能否由 s 使用 M 方法生成。 【数据范围】 组数 $q \\le 500$， $|s| \\le 500$，$sum(|s|) \\le 500$ Solution 1Idea遍历 s 中的所有折返点，对于每个折返点都生成一个新串 s’，在 s’ 中查找是否存在子串 t，若所有的 s’ 中均找不到 t，则失败；否则成功。 Complexity生成一个 s’ 的复杂度是 $O(N)$，在一个 s’ 中查找 t 的复杂度是 $O(N^2)$，总共有 N 个 s’，所以总复杂度为 $O(N^4)$。 注：若不主动生成每个 s’，而是遍历所有起始点和折返点手动判断字符串是否相等，则复杂度为 $O(N^3)$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;algorithm&gt;using namespace std;string extStr(string s, int rev_pt){ string part1 = s.substr(0, rev_pt); string part2 = s.substr(rev_pt, 1); string part3 = part1; reverse(part3.begin(), part3.end()); return part1 + part2 + part3;}bool getAns(string a, string b){ for (int rev_pt = 0; rev_pt &lt; a.size(); rev_pt++) { string ext = extStr(a, rev_pt); if (ext.find(b) != string::npos) return true; } return false;}int main(void){ int N; string a, b; string ans; cin &gt;&gt; N; for (int count = 0; count &lt; N; count++) { cin &gt;&gt; a &gt;&gt; b; getAns(a, b) ? cout &lt;&lt; &quot;YES&quot; : cout &lt;&lt; &quot;NO&quot;; cout &lt;&lt; endl; } return 0;} Solution 2Idea使用字符串哈希的思想，不再需要使用 string.find() 函数。遍历生成字符串 t’ 的起始点 i 和反转点 j，t 的长度已知时，终点 k 于是也已知。比对 t’ 和 t 的哈希值，可知 t 是否可由 s 生成。 h[i] 和 r[i] 中分别存储 s[0i] 和 s[ni] 的哈希值。hash(s[ijk]) 可由 h[i], h[j], r[j], r[k] 运算得到，不需要重复运算。 Complexity预处理 h 和 r 数组：$O(N)$ 计算 hash(s[ijk])：$O(1)$ 遍历所有的 i, j：$O(N^2)$ 所以总复杂度为 $O(N^2)$ Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#include &lt;iomanip&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;using namespace std;const long long MOD = 50331653;const int LEN = 510;long long h[LEN], r[LEN];long long pow26[LEN];long long CalcHash(int x, int y, int len);long long CalcHash(string s);bool GetAns(string s, string t);int main(void){ int Q; string s, t; cin &gt;&gt; Q; pow26[0] = 1; for (int i = 1; i &lt; LEN; i++) { pow26[i] = (pow26[i - 1] * 26) % MOD; } while (Q--) { cin &gt;&gt; s &gt;&gt; t; printf(&quot;%s\\n&quot;, GetAns(s, t) ? &quot;YES&quot; : &quot;NO&quot;); } return 0;}bool GetAns(string s, string t){ long long hash = 0; for (int i = 0; i &lt; s.size(); i++) { hash = (hash * 26 + s[i] - 'a') % MOD; h[i] = hash; } hash = 0; for (int j = s.size() - 1; j &gt;= 0; j--) { hash = (hash * 26 + s[j] - 'a') % MOD; r[j] = hash; } long long target = CalcHash(t); int len = t.size(); for (int x = 0; x &lt; s.size(); x++) { int low = ceil((x + len - 1) / 2.0); int high = len + x -1; for (int y = low; y &lt;= high; y++) { long long tmp = CalcHash(x, y, len); if (target == tmp) { return true; } } } return false;}long long CalcHash(int x, int y, int len){ int z = 2 * y - x + 1 - len; long long hash1; if (x &gt; 0) hash1 = ((h[y] - h[x - 1] * pow26[y - x + 1]) % MOD + MOD) % MOD; else hash1 = h[y] % MOD; long long hash2 = ((r[z] - r[y] * pow26[y - z]) % MOD + MOD) % MOD; long long hash = (hash1 * pow26[y - z] + hash2) % MOD; return hash;}long long CalcHash(string s){ long long hash = 0; for (int i = 0; i &lt; s.size(); i++) { hash = (hash * 26 + s[i] - 'a') % MOD; } return hash;}","link":"/Codeforces-%E9%A2%98%E8%A7%A3-1553B/"},{"title":"Codeforces 题解 1557A [Ezzat and Two Subsequences]","text":"【题目大意】 给定 n 个数字组成的数组（可为负），将其分为两组非空的子数组 a, b，定义 f(x) 为数组 x 的平均值，求 f(a) + f(b) 的最大值。 【数据范围】 组数 $t \\le 10^3$， $n \\le 10^5$，$|a_i|\\le 10^9$，$sum(n)\\le 3\\cdot 10^5$ SolutionIdea乍一看感觉是道有点难度的数学题，但是放在 A 的位置，肯定没有那么复杂。题目中给了不少的示例，通过观察示例可以猜到，应该是将数组中最大的一个元素单独拿出来成为一组，另外 n-1 个组成一组，这样的结果应该是最大的。 比赛的时候我用 double ，输出保留 9 位小数结果居然错了，怀疑是思路有问题，一直空到最后，快截止的时候发现整形数据我使用的是 int ，改成了 long long 之后提交通过了。 数学证明如下（翻译自 Codeforces 官方 tutorial） 首先有：一组数的均值总是大于等于这组数中的最小值，小于等于这组数中的最大值。 将数组排列有序：$a_1 \\le a_2 \\le … \\le a_n$ ，下面用反证法证明： 假设当选取最大的两个数字组成一组时的结果比只选取最大的一个数组时的结果更大，即$$\\frac{\\sum_{i=1}^{n-1}a_n}{n-1} + a_n &lt; \\frac{\\sum_{i=1}^{n-2}a_i}{n-2}+\\frac{a_{n-1}+a_n}{2}$$化简得$$a_n &lt; \\frac{2\\sum_{i=1}^{n-2}a_i}{(n-1)(n-2)}+\\frac{n-3}{n-1}a_{n-1}$$记 $avg_1 = \\sum_{i=1}^{n-2}a_i/(n-2)$，因为 $a_n$ 有序，所以 $a_1 \\le avg_1 \\le a_{n-2}$ 所以上式可以化为$$a_n &lt; \\frac{2\\cdot avg_1 + (n-3)a_{n-1}}{n-1}$$不等式右边可以看做 $[avg_1, avg_1, a_{n-1}, a_{n-1}, a_{n-1}…]$ 的平均值，记为 $avg_2$，可知 $avg_1 \\le avg_2 \\le a_{n-1}$ 因此$$a_n &lt; avg_2 \\le a_{n-1} \\le a_n$$矛盾，证毕 不过官方题解只证明了问题的一小部分，并不是原问题的完美解答，具体证明我也不会，不过比赛的时候只管猜就是了。 Complexity$O(N)$ 不解释 Code12345678910111213141516171819202122232425262728#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;using namespace std;int T, N;int main(){ cin &gt;&gt; T; while (T--) { cin &gt;&gt; N; long long sum = 0; long long max_num = -1000000001; long long num; double ans; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; num; sum += num; max_num = max(max_num, num); } ans = (double) (sum + (N - 2) * max_num) / (double) (N - 1); printf(&quot;%.9lf\\n&quot;, ans); } return 0;}","link":"/Codeforces-%E9%A2%98%E8%A7%A3-1557A/"},{"title":"Codeforces 题解 1557B [Moamen and k-subarrays]","text":"【题目大意】 给出 n 个数组成的数组 a，记操作 M 为：将 a 切分为 k 份，这 k 份任意排列，组成序列 b。若存在某种操作 M，使得 b 单调不减，则输出 Yes，否则 No 【数据范围】 组数 $t \\le 10^3$，$k \\le n \\le 10^5$，$|a_i| \\le 10^9$ 且 $a_i$ 互不相等，$\\sum n \\le 3\\cdot 10^5$ SolutionIdea要使得 k 组子序列排列后构成单增序列，则每个子序列的内部是单调增且紧密的，“紧密”指的是不可能从该子序列的外部找到一个这样一个元素：该元素可以插入该子序列内部，并维持序列的单调性。例如，若将 [3, 5, 6, 1, 2, 4] 分割为 [3, 5, 6] 和 [1, 2, 4]，虽然每个子序列是单增的，但是 3 可以插入到 [1, 2, 4] 中组成 [1, 2, 3, 4]，因此排列这两个子序列无论如何也不能得到一个单增的完整序列。 构造结构体 s，存储每个元素的值 val 和其在原序列中的序号 idx，按照 val 对 s 从小到大排序，依次遍历 s 中元素，若 val 顺序与 idx 顺序保持相邻，则表示可以切分入同一个子序列中，否则增加 section 值，表示需要另开一个子序列。 最后比较 section 和 k 的大小。 Complexity快排：$O(N\\cdot logN)$ 遍历：$O(N)$ 总复杂度：$O(N\\cdot logN)$ Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int T, N, K;struct coup{ int num; int idx;}s[100010];bool cmp(coup a, coup b){ return a.num &lt; b.num;}int main(void){ cin &gt;&gt; T; while (T--) { cin &gt;&gt; N &gt;&gt; K; int tmp; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; tmp; s[i].num = tmp; s[i].idx = i; } sort(s, s + N, cmp); int section = 0; int cnt = 0; while (cnt &lt; N) { while (cnt + 1 &lt; N &amp;&amp; s[cnt + 1].idx == s[cnt].idx + 1) { cnt++; } cnt++; section++; } if (section &lt;= K) cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl; else cout &lt;&lt; &quot;No&quot; &lt;&lt; endl; } return 0;}","link":"/Codeforces-%E9%A2%98%E8%A7%A3-1557B/"},{"title":"Git 操作简介","text":"此简易教程的初稿写于大二寒假，用于科协的 FC18 项目开发组的代码远程管理，因为涉及 Unity 项目，所以使用了 Git LFS 和 YAML Merge 等比较高级的工具。 在大三暑假时做过一次修改，用于管理电设小学期团队的机械臂项目 JetArm 的合作开发。新版删除了涉及 Unity 的部分，并做了精简优化，这里发出来作为存档，以便随时参考。 注意：该教程使用 GitLab，但是与 GitHub 的操作差不多，可以作为参考 Git简易教程作者：杨鼎 初版日期：2021/1/23 修改日期：2021/6/29 注：此为简易教程，详细学习可以参考以下两个网站： https://www.runoob.com/git/git-tutorial.html https://www.liaoxuefeng.com/wiki/896043488029600 CASE 1：准备工作1、Git 下载 方法一：从官网 https://git-scm.com/downloads 下载（速度比较慢，建议挂VPN） 方法二：从我的清华云盘 https://cloud.tsinghua.edu.cn/f/68b3db8ad9b1456b815a/ 下载 2、Git 安装安装过程中会有很多选项，看得懂的部分可以自定义，看不懂的就默认好了。 3、Git 简介Git是分布式版本控制系统，每个人的电脑中都有完整的版本库。 3个区的概念： 工作区：在电脑中能看到文件和目录。 暂存区：工作区到版本库中间的缓冲，多次暂存，一次提交。 版本库：检查完毕，正式提交的内容会存到版本库。 4、注册GitLab账号大家都有并且我已经把大家拉进项目开发组了 5、设置Personal Access Tokens 进入GitLab，点击右上角人像，选择Settings 进入Access Tokens界面，输入用户名（随意取），勾选下面全部选项，点Create personal access token ![user setting](/Git-操作简介/user setting.png) 别忘了将生成的密钥保存下来 以后，首次通过https方式克隆远程仓库时，需要输入用户名和密钥（就是上面新建的）来证明身份，以后进行远程访问的操作就不需要重复输入了 6、添加提交代码时使用的用户名和邮箱打开 Git Bash，输入以下命令（只需要设置一次） 设置用户名，git config --global user.name &quot;你的姓名&quot; 例如 git config --global user.name &quot;Alex&quot; 设置邮箱， git config --global user.email 你的邮箱 例如 git config --global user.email Alex123@qq.com CASE 2：从远程仓库克隆到本地开发适用情形：已有远程仓库，需要将仓库中的代码克隆到本地进行开发。 1、克隆远程仓库到本地在你打算存放本地仓库的文件夹下，右键打开Git Bash 命令行窗口。 输入git clone https://git.tsinghua.edu.cn/yang-d19/jetarm.git，clone 后面的就是本项目的地址。敲回车，之后远程仓库就被克隆到本地了。 你在当前文件夹下可以看到新的本地仓库文件夹jetarm。 2、修改进入克隆出来的本地仓库，打开Git Bash，随便添加一点什么，比如新建一个test.txt，然后在里面写一句hello world，保存并关闭，此时工作区就被修改了。在命令行中输入git status，可以查看当前状态，应有提示test.txt还未被添加。 3、暂存git add . 将工作区中的修改添加到暂存区，这句命令中的.表示所有文件，也可以单独指明添加哪个文件，如git add test.txt。此时再用git status查看状态，应有提示test.txt还未被提交。 4、提交git commit -m &quot;说明&quot;，例如git commit -m &quot;add a new file&quot;，暂存区的更改就被添加到版本库了。此时再输入git status查看状态，应有提示本地分支还未被推送到远程仓库。 5、推送git push，将本地分支推送到远程仓库，此时用git status查看状态，会发现所有更改均已被提交，且本地与远程是同步的。 CASE 3：将本地代码同步到远程仓库适用情形：远程仓库是空的，需将本地代码推送到远程仓库，让队友在你的代码基础上开发。 1、与远程仓库连接git init 初始化本地仓库 git remote add origin https://git.tsinghua.edu.cn/yang-d19/jetarm.git，origin 后面的就是远程仓库地址，完成本地仓库与远程仓库的连接。 2、暂存git add . 添加所有文件到暂存区。 3、提交git commit -m 说明，例如git commit -m &quot;Initialize&quot;，添加所有文件到版本库。 4、推送git push，推送本地代码到远端。 CASE 4：日常修改及提交git pull，确保拉取远程仓库中最新的代码， 改完了之后git commit -a -m 说明，暂存并提交 git push，推送到远程仓库 CASE 5：解决合并冲突适用情形：两人基于相同的版本修改代码，对方比你先将修改推送到远程仓库，此时你在本地的暂存和提交操作均可执行，但是推送到远程仓库时会报错。 1、将远程仓库中的代码拉取到本地git pull拉取远程代码到本地并尝试自动合并。 git pull是git fetch和git merge FETCH_HEAD命令的合体，拉取远程代码到本地后，Git会先尝试自动合并冲突，如果两人的修改不在一个文件中，或者在一个文件中，但互不影响，自动合并就是成功的，此时应当没有报错，直接跳转到第3步；否则进入第2步。 2、手动解决冲突用编辑器如 VSCode 进入有冲突的文件，查找用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;这样的字符串包围的代码块，删掉对方或自己的改动，或者综合两者以解决冲突，保存并退出。 3、暂存且提交1git commit -a -m &quot;说明&quot;`，例如`git commit -a -m &quot;resolve merge conflits&quot; 这句命令等效于 git add . 和 git commit -m “说明” 两句命令的综合 4、推送到远端git push，此时应当没有问题了。","link":"/Git-%E6%93%8D%E4%BD%9C%E7%AE%80%E4%BB%8B/"},{"title":"Git常用操作合集","text":"记录了一些 Git 的常用操作，免得每次都重复搜索。 1、基础操作在当前文件夹初始化一个仓库： 1git init 克隆远程仓库： 1git clone &lt;storage-url&gt; 暂存： 1git add . 提交： 1git commit -m &quot;说明&quot; 推送： 1git push 2、远程相关添加远程仓库： 1git remote add &lt;strorage-name&gt; &lt;storage-url&gt; 查看所有已添加的远程仓库： 1git remote -v 更新仓库信息： 1git fetch &lt;strorage-name&gt; 在本地新建一个与远程仓库某分支对应的新分支，并切换过去： 1git checkout -b &lt;channel-name&gt; &lt;storage-name&gt;/&lt;remote-channel-name&gt; 将当前分支上的更新推送到远程仓库的某分支： 1git push &lt;storage-name&gt; &lt;remote-channel-name&gt; 3、分支相关列出所有的分支： 1git branch 创建分支但不切换： 1git branch &lt;branch-name&gt; 删除指定分支，会自动阻止删除包含未合并更改的分支： 1git branch -d &lt;branch-name&gt; 强制删除指定分支： 1git branch -D &lt;branch-name&gt; 重新命名当前分支： 1git branch -m &lt;branch-name&gt; 切换到指定分支： 1git checkout &lt;channel-name&gt; 放弃当前工作区所有未暂存的修改： 1git checkout . 放弃工作区某未暂存的文件： 1git checkout -- &lt;filename&gt; 放弃工作区和暂存区的所有修改： 1git checkout -f 获取当前分支名： 1git rev-parse --abbrev-ref HEAD 获取当前 commit 完整 hash 值： 1git rev-parse HEAD 获取当前 commit 短 hash 值： 1git rev-parse --short HEAD 4、修改记录相关查看提交历史记录 1git log 几个常用的选项： 1234567--oneline 以精简模式显示--graph 以图形模式显示--stat 显示文件更改列表--author='name' 显示某个作者的日志-p filepath 查看某个文件的详细修改-L start,end:filepath 查看某个文件某几行范围内的修改记录--stat commitId 查看某一次提交的文件修改列表","link":"/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%90%88%E9%9B%86/"},{"title":"Intelligent 3D LED Smart Alarm Clock","text":"This the final project for course ECE 5725 Embedded Operating System at Cornell University (2023 Fall). Me and my team members build an intelligent 3D LED smart alarm clock with LED panels bought from Adafruit, 3D printed frameworks and specially designed software based on open source libraries. Introduction Intelligent 3D LED Smart Alarm Clock is an compact designed electronic object that integrates functions like displaying current time, set alarm and make an alarm sound when the set time is reached, switch to different special displaying effects when accelerometer detects pose change, etc. It comprises three LED panels, each has 16x32 pixels, all three panels are installed in the 3D printed base with magnets so they are all dismountable. Three panels form a triangular space, where Raspberry Pi 4B, LED matrix driver hat, accelerometer and button related circuitry are installed inside of it. The RGB matrix driver hat produced by Adafruit is used to drive the LED panels. We employed the open source library rpi-rgb-led-matrix and created many interfaces on top of it to better control all the displaying details in pixel accuracy. This is a team work conducted by: Ding Yang dy297@cornell.edu Steve Wang sw2327@cornell.edu Keyun Gao kg535@cornell.edu The code of this project is on GitHub: steve-z-wang/ece5725-final-project (github.com) Product FunctionsDefault modeThe default mode, when the clock is held horizontally, the time will automatically show on the side that aims directly at users; when the clock is held vertically, the digits of time will fall down to the ground side like sand; when the clock is held horizontally again, the “sand of time” will backtrack to their starting position to form the original time. Alarm setting modeThis mode allows users to set the alarm time by two buttons, one for selecting hour or minute, and the other for incrementing the set time. Zen modeAll three panels display the selected picture in a scrolling way (by default Tai Chi diagram) Snowflake modeSimulate 100 pixels in one panel like snowflakes, they will fall and bounce between the sides with the change of pose, which is achieved by reading data from the accelerometer inside the clock. Framework DesignAll the 3D printed objects are designed in [Onshape](Onshape | Product Development Platform), an online CAD software system that helps create different 3D models and assemblies.The 3D printed case for our project is composed of 2 bases and 3 side bars. Base Side BarsThe overall structure of three side panels are the same, but they differ in a few details. One has 16 holes designed to install 4 buttons. One has a long notch on one side to let power cable and speaker cable go through. The shape of them is designed to better fit between the bases and the panels without the help of screws or glue. AssemblyTwo bases and three side bars are put together with the help of magnets. We avoid using glues, so that each part can be easily disassembled and replaced. Magnets and Screws Hardware DesignThe hardware design is shown below, we have four buttons and one accelerometor in the circuit.They need seven GPIO pins to connect to the RPi. The buttons are pulled down in our code, so no pull down circuit in our circuit. Software DesignThis is an outline for our software design. It contains cpp programs, python programs and shell scripts. It also utilized FIFO to communicate between different processes. DemonstrationDefault Mode Horizontal Scroll Vertical Falling Horizontal Recovering Alarm Setting Mode Set Hours Set Minutes Zen Mode Snowflake Mode ReferencesRaspberry Pi RGB LED Matrix Library Snowflake Effect Project R-Pi GPIO Document","link":"/Intelligent-3D-LED-Smart-Alarm-Clock/"},{"title":"Jetson Nano 安装 Tensorflow2","text":"Jetson Nano 是 arm 架构的处理器，Tensorflow 官网的安装教程无法适用，需要从 NVIDIA 官网下载专门的安装包。下面是在 Jetson Nano 上安装 Tensorflow2 的详细流程。 1、使用 jtop 查看 Jetpack 版本号刷新 apt 存储库索引 1$ sudo apt-get update 使用 apt-get 安装 pip3 1$ sudo apt-get install python3-pip 使用 pip3 安装 jtop，jtop 是一个用于监测和控制 NVIDIA Jetson 系列产品的软件，虽然在终端运行，但是界面做的非常漂亮。你可以用它监测 CPU, GPU, 风扇等的运行情况。jtop 的 github 链接： https://github.com/rbonghi/jetson_stats 1$ sudo -H pip3 install -U jetson-stats 启动 jtop，如果不成功的话可能需要重启 Jetson 1$ jtop 按数字键 1~6 可以跳转到不同的控制界面，按 q 退出 在界面 6 [INFO] 一栏可以看到 Jetpack 版本信息，我的机器是 4.5.1 版本的 或者使用 jetosn_release 指令也可以查看机器信息： 1$ jetson_release -v 同样可以看到，Jetpack 是 4.5.1 版本的。 2、从官网下载并安装 TensorflowNVIDIA 在 Jetson Nano 上安装 Tensorflow 的官方教程网址为： Official TensorFlow for Jetson Nano! - Jetson &amp; Embedded Systems / Jetson Nano - NVIDIA Developer Forums 因为我已经确认了我的机器上的 Jetpack 为 4.5 版本的，所以我按照第一部分即（Python 3.6 + Jetpack 4.5）下面的教程操作，依次输入以下指令（建议直接去官网上找，因为具体内容可能随着时间会不断更新）： 12345678sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortransudo apt-get install python3-pipsudo pip3 install -U pip testresources setuptools==49.6.0sudo pip3 install -U numpy==1.16.1 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures protobuf pybind11# TF-2.x$ sudo pip3 install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v45 tensorflow# TF-1.15$ sudo pip3 install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v45 ‘tensorflow&lt;2’ 后两步可能比较慢，耐心等待。我没有更换 pip3 的源也都下载安装成功了，如果因为网络原因失败了的话也可以换一下 pip3 的源再尝试。 3、检查安装是否成功进入 python 交互环境： 1$ python3 尝试 import tensorflow： 1&gt;&gt;&gt; import tensorflow as tf 查看版本： 1&gt;&gt;&gt; tf.__version__ 出现以下界面表示成功 4、可能遇到的问题及解决方法我遇到了 import tensorflow 指令不成功的错误，报错 Illegal instruction(core dumped)，import numpy 也是一样的报错，而且重启、重装系统问题依旧。 解决方法：打开 ~/.bashrc 文件，在末尾添加一行 export OPENBLAS_CORETYPE=ARMV8 此时再按照上一步检验 tensorflow 版本，就没有问题了。 5、参考文章[1] Jetson Nano 入门教程3 - 必备软件安装Pytorch TensorFlow - 知乎 (zhihu.com) [2] Official TensorFlow for Jetson Nano! - Jetson &amp; Embedded Systems / Jetson Nano - NVIDIA Developer Forums [3] 解决英伟达Jetson平台使用Python时的出现“Illegal instruction(cpre dumped)”错误_简明AI工作室-CSDN博客 [4] Illegal instruction (core dumped) on import for numpy 1.19.5 on ARM64 · Issue #18131 · numpy/numpy (github.com)","link":"/Jetson-Nano-%E5%AE%89%E8%A3%85-Tensorflow2/"},{"title":"Linux常用操作合集","text":"记录了一些 Linux 下的常用操作。 关闭 anaconda 自动进入 base 虚拟环境 1conda config --set auto_activate_base false","link":"/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%90%88%E9%9B%86/"},{"title":"My Web Server Configuration","text":"This blog introduce the detailed configuration of my cloud server, including customizing shell theme and vim theme. It also tell you how to run a apache http server and deploy your blog resource to the server. 1. Get Cloud ServerI bought it from Tecent Cloud. 学生云服务器_学生云主机_学生云数据库_云+校园特惠套餐 - 腾讯云 (tencent.com) 2. Configuration(1) Set basic environmenta. switch to zshInstall zsh 12sudo apt-get updatesudo apt-get install zsh Change default shell to zsh 1chsh -s /bin/zsh Close and reopen terminal, then use 1echo $SHELL to check if you have seccessfully changed to zsh b. install oh-my-zshI choose oh-my-zsh. A powerful and beautiful zsh shell theme. It’s hard to directly download files from github in China, so I use a domestic mirror to accelarate the procedure. If you don’t have that problem, just follow the instruction from here to install it. Download install.sh by 1wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh Change the below lines 12REPO=${REPO:-ohmyzsh/ohmyzsh}REMOTE=${REMOTE:-https://github.com/${REPO}.git} to 12REPO=${REPO:-mirrors/oh-my-zsh}REMOTE=${REMOTE:-https://gitee.com/${REPO}.git} Then run 1zsh install.sh Modify the remote url of oh-my-zsh to make it update from the mirror instead of github 12cd ~/.oh-my-zshgit remote set-url origin https://gitee.com/mirrors/oh-my-zsh.git c. enable ssh pubkey authenticationGenerate your local rsa key pair 1ssh-keygen -t rsa Copy the content of id_rsa.pub and add to ~/.ssh/authorized_keys. Then entersshd_config to enable authentication 1sudo vim /etc/ssh/sshd_config uncomment those two lines 12PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys restart sshd service 1systemctl restart sshd d. keep connection aliveIt annoys me that my cloud server always disconnect with my local ssh terminal after a period of time without manipulation. One solution is to modify /etc/ssh/sshd_config. Uncomment those two lines: 12#ClientAliveInterval 0#ClientAliveCountMax 3 and change them to: 12ClientAliveInterval 60ClientAliveCountMax 3 which means the server will send signals to client every 60 seconds to keep the connection alive, and the connection will be closed if denied for 3 times. Then restart sshd service 1systemctl restart sshd Reopen the terminal, then you won’t be disconnected (2) Oh-my-zsh advance configa. color themesYou can select various color themes, my favorite is agnoster. It looks like that: Change it by modifying ZSH_THEME=&quot;agnoster&quot; or something else in ~/.zshrc. If you do not want to display user name and server name, just like me, add prompt_context() {} at the end of ~/.zshrc . Check Themes · ohmyzsh/ohmyzsh Wiki (github.com) to find more oh-my-zsh themes. b. add pluginsI add three plugins to oh-my-zsh zsh-autosuggestions and zsh-syntax-highlighting need manual installation 12git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting z has been installed by default. Then add these plugins to plugins = (...) in ~/.zshrc, just like below 1plugins=(git z zsh-autosuggestions zsh-syntax-highlighting) Note that git is both installed and added to plugins list by default. You can add as many plugins as you can, but it may slow down the zsh shell, be cautious! (3) Vim advance configThis is my personal configuration file .vimrc 123456789101112131415161718192021222324252627282930syntax on filetype offset nocompatibleset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()Plugin 'VundleVim/Vundle.vim'Plugin 'tomasr/molokai'Plugin 'vim-airline/vim-airline'Plugin 'vim-airline/vim-airline-themes'Plugin 'jiangmiao/auto-pairs'call vundle#end()filetype plugin indent oncolorscheme molokailet g:molokai_original = 1let g:airline_theme='molokai'set backspace=2set showcmdset cursorlineset hlsearchset background=darkset ts=4set softtabstop=4set shiftwidth=4set expandtabset autoindentset number I use Vundle, the plug-in manager for Vim as my vim plugin manager. To install Vundle, run git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim, with Vundle, you can manage your vim plugin more conveniently. You can choose awesome vim plugins from Vim Awesome, type vim +PluginInstall +qall every time you add plugins between call vundle#begin() and call vundle#end(). This is how it looks like. tomasr/molokai, vim-airline/vim-airline and so on are all plugins that I added, but keep in mind that too many plugins may slow down your editor, so I prefer to install most necessary vim plugins only. (4) Apache serverI use apache as the web engine to post my blogs. 12sudo apt updatesudo apt install apache2 See if apache service is running in your server. 1sudo systemctl status apache2 Then type my server’s IP address in browser Done! Substitute /var/www/html/index.html with your own resources, such as your blogs, then people can go to the website to view your blogs.","link":"/My-Web-Server-Configuration/"},{"title":"VSCode 使用 PlatformIO 插件开发基于 HAL 库的 STM32项目","text":"一般我们开发 STM32 都是使用 Keil，虽然 Keil 功能强大，但是界面实在是丑，用起来不爽。之前玩 Arduino 的时候接触到了 VSCode 里面的 PlatformIO 插件，想着也用 VSCode 安装 PlatformIO 开发 STM32，折腾了好几天终于成功。主要流程就是先用 STM32CubeMX 生成基于 HAL 库的项目初始代码，再手动配置 platformio.ini 文件，最后使用 VSCode 打开。 一、下载 vscode从 visual studio code 官网下载安装即可 二、vscode内安装platformio插件搜索 PlatformIO IDE，安装即可 三、下载STM32CubeMX下载地址：STM32CubeMX - STM32Cube初始化代码生成器 - STMicroelectronics 四、使用cubemx生成初始代码1、点击 ACCESS TO MCU SELECTOR 2、选择自己用的板子型号，可直接搜索 3、引脚和时钟按需求自己配置，此处略过。之前没有配置过的建议另寻教程学习 4、一键生成STM32初始代码点击 Project Manager，进入项目管理界面 （1）选择 Project Application Structure 选择 Basic Toolchain/IDE 选择 Makefile （2）选择 Code Generator 选择 Copy only the necessary files 勾选 Generate peripheral initialization as a pair of ‘.c/.h’ files per peripheral 点击右上角的 GENERATE CODE ，生成代码 五、CubeMX 和 VSCode 配合1、配置 platformio.ini 文件打开生成的代码所在的文件夹，此时文件结构应该如下图所示 在项目所在文件夹中新建一个空白文件，重命名为 platformio.ini，将如下代码拷贝到文件中 123456789101112131415161718192021[platformio]src_dir = ./include_dir = Inc[env:genericSTM32F103RC]platform = ststm32board = genericSTM32F103RCbuild_flags = -D STM32F103xE -IInc -IDrivers/CMSIS/Include -IDrivers/CMSIS/Device/ST/STM32F1xx/Include -IDrivers/STM32F1xx_HAL_Driver/Inc -IDrivers/STM32F1xx_HAL_Driver/Inc/Legacy/src_filter = +&lt;Src/&gt; +&lt;startup_stm32f103xe.s&gt; +&lt;Drivers/&gt;board_build.ldscript = ./STM32F103RCTx_FLASH.lddebug_tool = stlink 注意：上面的配置基于我自己的板子，具体细节需要结合实际情况修改。 比如，我使用的板子型号是 STM32F103RC 若你使用的型号是 STM32F103ZE，则[env:genericSTM32F103RC] 要改成 [env:genericSTM32F103ZE] ， board = genericSTM32F103RC 要修改为 board = genericSTM32F103ZE，等等~~ src_filter = +&lt;Src/&gt; +&lt;startup_stm32f103xe.s&gt; +&lt;Drivers/&gt; 这一行中的 &lt;startup_stm32f103xe.s&gt; 对应的是 cubemx 生成的项目文件中的 startup_stm32f103xe.s ，从上图可以找到； board_build.ldscript = ./STM32F103RCTx_FLASH.ld 这一行中的 ./STM32F103RCTx_FLASH.ld 对应的是 cubemx 生成的项目文件中的 STM32F103RCTx_FLASH.ld，同样从上图中可以找到； 总之，platformio.ini 这个配置文件要根据 cubemx 自动生成的文件的具体名称而做修改，但是大体结构是不变的。 2、使用 vscode 打开（1）右键项目文件夹，选择用 Code 打开（2）可以看到文件夹中多出了自动生成的一些内容 （3）成功打开项目后的 VSCode 界面 （4）点击左下角的 √ 是编译， → 是烧录","link":"/VSCode-PlatformIO%E5%BC%80%E5%8F%91%E5%9F%BA%E4%BA%8EHAL%E5%BA%93%E7%9A%84STM32/"},{"title":"WSL2 Ubuntu GUI Configuration","text":"This article explains how to configure a graphical interface for an Ubuntu system based on WSL2. It uses xrdp as the daemon, which supports Microsoft’s Remote Desktop Protocol (RDP) and uses either Xvnc or xorgxrdp as its backend. The desktop environment used is xfce4, a lightweight desktop environment designed for Unix-like operating systems, capable of running under limited system resources. 本文同时提供以下语言的翻译： 中文. The main references is: WSL2 Ubuntu GUI 图形用户界面_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 1. Install and run xrdp &amp; xfce4First, update apt source: 1sudo apt update &amp;&amp; sudo apt upgrade Then install xrdp: 1sudo apt install xrdp Then install light weight desktop xfce4: 1sudo apt install xfce4 xfce4-goodies It’s worth noting that I encountered the error Fail to fetch [url], Connection failed [IP] at this step. I suspect the issue was caused by network problems when trying to fetch packages from the official Ubuntu repository, so I switched to the Tsinghua University mirror instead. Tsinghua Open Source Mirror If the following interface appears, it means the installation was successful. Pick any one, click on OK。 Now let’s set the configuration file for xrdp，to enable support on 128-bit color depth. 1sudo vim /etc/xrdp/xrdp.ini Please search for bpp ： Change max_bpp=32 to max_bpp=128 Uncomment #xserverbpp=24, and change to xserverbpp=128 Now make xfce4 to be the default launching session： 1echo xfce4-session &gt; ~/.xsession Edit /etc/xrdp/startwm.sh, comment last 2 lines, and add startxfce4, as shown in screenshot below Use the command sudo /etc/init.d/xrdp start to start the remote desktop protocal service, the following message is a sign of success. 1* Starting Remote Desktop Protocal server [OK] 2.Connect to a remote desktop in WindowsNow connect to xfce4 inside WSL2 in Windows environment: First, get the IP of eth0 Network adapter in WSL2. enter ip a, you will get messages like below: 1234565: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:15:5d:6d:d1:31 brd ff:ff:ff:ff:ff:ff inet 192.168.127.80/20 brd 192.168.127.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::215:5dff:fe6d:d131/64 scope link valid_lft forever preferred_lft forever 192.168.127.80 behind inet is the IP address that we need. Next, open Remote Desktop on Windows by simply searching for “Remote Desktop” in the Start Menu. Enter the IP address mentioned above and click Connect. Then, in the following interface, enter your username and password: Click Connect, and you’re all set! To use the browser, open Terminal, enter sudo apt install firefox. 3. Configurations for Remote Desktop(1) Font and Screen ScalingIf you’re using a 4K high-resolution display, the fonts in Remote Desktop will appear extremely small. You’ll need to go into Appearance to adjust the settings: Set Windows Scaling option to 2x: You can also modify DPI in Fonts menu. The larger DPI number is, the larger text size will be. (2) Solve Desktop Disconnection ProblemI found that after leaving Ubuntu idle for some time, the Remote Desktop session would automatically go black. Even after closing and reconnecting, the issue persisted, and only restarting the xrdp service could fix it. Later, I found a solution, which came from: 如何解决xrdp远程连接ubuntu20.04后黑屏的问题？ - 知乎 (zhihu.com)： In Setting -&gt; Light Locker Settings, set Automatically lock the session to Never. 4.Simple Script For One Click StartupThe following shell starts xrdp service and display IP address: 123# ~/Documents/set-rdp.shsudo /etc/init.d/xrdp startifconfig | grep inet | head -n 1 | awk '{print $2}' Add the following command to .zshrc (if you use zsh, otherwise use .bashrc etc.) 123rdp() { ~/Documents/set-rdp.sh} Run the command: 12source ~/.zshrcsudo chmod +x ~/Documents/set-rdp.sh You can then type rdp in the terminal to start the xrdp service and display the IP address of WSL2, as shown below:","link":"/WSL2-Ubuntu-GUI-Configuration/"},{"title":"Vim配置及操作","text":"早在初次接触 Linux 系统时就听闻过 Vim 的大名，但是当时只会连进入编辑和退出编辑都不会，印证了那句话：“生成随机字符串的最好方法是让新手尝试退出 Vim”。后来学会了基础的使用方法，终于可以使用 Vim 做一些简单的终端文字处理，但是面对一坨黑框和没有高亮的代码，改一句简单的代码都痛苦万分，于是找教程配置插件，终于将 Vim 打造成了高端的模样。下面的内容分为两部分，第一部分是 Vim 常用的操作合集，第二部分是 Vim 的配置方法。（可能会不断更新，毕竟 Vim 太需要折腾了） Vim 常用操作1、命令模式:q 退出编辑器 :q! 强制退出编辑器 :w 保存修改 :x 保存修改并退出 2、插入模式i 在当前行插入 o 在下一行插入 &lt;Esc&gt; 退出插入模式 dd 删除当前行 ndd 删除当前行起以下 n 行 Vim 配置方法1、vimrc 文件内容123456789101112131415161718192021222324252627282930syntax on filetype offset nocompatibleset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()Plugin 'VundleVim/Vundle.vim'Plugin 'tomasr/molokai'Plugin 'vim-airline/vim-airline'Plugin 'vim-airline/vim-airline-themes'Plugin 'jiangmiao/auto-pairs'call vundle#end()filetype plugin indent oncolorscheme molokailet g:molokai_original = 1let g:airline_theme='molokai'set backspace=2set showcmdset cursorlineset hlsearchset background=darkset ts=4set softtabstop=4set shiftwidth=4set expandtabset autoindentset number 2、解释set rtp+=~/.vim/bundle/Vundle.vim 使用 Vundle 管理 Vim 的插件 call vundle#begin() 到 call vundle#end() 两行之间是使用 Vundle 管理的所有插件 3、其它此处给出一个可以找到需要的插件的网址 Vim Awesome，这个网站提供了很多的 Vim 插件。 举例，我想安装 python 代码的补全插件 jedi-vim，找到 INSTALL FROM 这个选项，选择 Vundle（或者你用的其它的插件管理工具），按照指示在 .vimrc 文件中添加 Plugin davidhalter/jedi-vim'，并输入 :source % 和 :PluginInstall 安装。（别漏了冒号）","link":"/Vim%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%93%8D%E4%BD%9C/"},{"title":"WSL2 Ubuntu GUI 配置","text":"本文讲解关于配置基于 WSL2 的 Ubuntu 系统的图形界面。 使用 xrdp 作为守护程序，它支持 Microsoft 的 Remote Desktop Protocol (RDP) 且使用 Xvnc 或 xorgxrdp 作为其后端。使用 xfce4 作为桌面环境，xfce 是一个轻量级的桌面环境，专为 Unix-like 的操作系统设计，能在有限的系统资源下运行。 The article is also available in language: English. 主要参考的资料为：WSL2 Ubuntu GUI 图形用户界面_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 1. 安装并启动 xrdp 和 xfce4首先更新 apt 源： 1sudo apt update &amp;&amp; sudo apt upgrade 然后安装 xrdp： 1sudo apt install xrdp 接着安装轻量级的桌面 xfce4： 1sudo apt install xfce4 xfce4-goodies 需要注意的是，我在这一步出现了 Fail to fetch [url], Connection failed [IP] 的报错，猜测是网络原因导致从 ubuntu 的官方仓库拉取包出错，于是切换到了清华源：ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 再次执行命令，跳出如下界面即为成功安装： 任选一个，点击 OK。 接下来配置 xrdp 的配置文件，使其支持 128 位位图深度。 1sudo vim /etc/xrdp/xrdp.ini 搜索 bpp ： 将 max_bpp=32 改为 max_bpp=128 将 #xserverbpp=24 取消注释，并改为 xserverbpp=128 接下来将 xfce4 设置为默认启动的 session： 1echo xfce4-session &gt; ~/.xsession 然后编辑 /etc/xrdp/startwm.sh，将最后两行注释起来，再添加一行 startxfce4 即可，如下图： 最后 sudo /etc/init.d/xrdp start 启动远程桌面协议服务，出现如下提示即启动成功： 1* Starting Remote Desktop Protocal server [OK] 2. 从 Windows 下连接远程桌面接下来从 Windows 桌面连接到 WSL2 下的 xfce4 环境: 首先查看 WSL2 的 eth0 网卡的 IP，输入 ip a，找到 eth0 的信息，如下： 1234565: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:15:5d:6d:d1:31 brd ff:ff:ff:ff:ff:ff inet 192.168.127.80/20 brd 192.168.127.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::215:5dff:fe6d:d131/64 scope link valid_lft forever preferred_lft forever inet 后的 192.168.127.80 即为我们需要的 IP 地址。 接着打开 Windows 下的远程桌面，直接在开始菜单中搜素 “远程桌面” 即可，输入上面的 IP，点击连接。 接着在如下界面输入用户名和密码： 点击连接，大功告成！ 如果需要使用浏览器，打开 Terminal，输入 sudo apt install firefox 即可。 3. 远程桌面的一些配置(1) 调整字体和UI缩放如果你使用的是 4K 高分屏，那么远程桌面的字体会非常非常小，需要进入 Appearance 修改配置： 将 Windows Scaling 选项调整为 2x： 也可以在 Fonts 菜单项中修改 DPI，DPI 越大，显示字体越大。 (2) 解决桌面断联问题我发现一段时间不操作 Ubuntu 后，远程桌面会自动黑屏，关闭后再次连接还是一样，只有重启 xrdp 服务才能解决。后来找到了解决方法，来自 如何解决xrdp远程连接ubuntu20.04后黑屏的问题？ - 知乎 (zhihu.com)： 在 Setting -&gt; Light Locker Settings 中将 Automatically lock the session 设置为 Never 即可。 4. 简单脚本实现一键启动使用如下 shell 脚本可实现一键启动 xrdp 服务，并显示 IP 地址。 123# ~/Documents/set-rdp.shsudo /etc/init.d/xrdp startifconfig | grep inet | head -n 1 | awk '{print $2}' 在 .zshrc（根据你使用的 shell 调整）中添加 123rdp() { ~/Documents/set-rdp.sh} 再执行 12source ~/.zshrcsudo chmod +x ~/Documents/set-rdp.sh 即可在终端输入 rdp 以启动 xrdp 服务，并显示 WSL2 的 IP 地址，如下：","link":"/WSL2-Ubuntu-GUI-%E9%85%8D%E7%BD%AE/"},{"title":"WSL2搭建v2Ray代理","text":"WSL2 下没法直接使用 Windows 中的 VPN，导致涉及到 GitHub 的操作经常失败，因此尝试在 WSL2 中搭建 v2Ray 代理。 V2Ray 核心使用的是 v2fly/v2ray-core: A platform for building proxies to bypass network restrictions. (github.com)； V2Ray 客户端使用的是 v2rayA/v2rayA: A web GUI client of Project V which supports V2Ray, Xray, SS, SSR, Trojan and Pingtunnel 🚀 (github.com)； 购买境外节点使用的是 Portal Home - V2NET (v2ray.cx) 下面是详细流程： 本文参考了：一学就会，树莓派4B搭建V2Ray图文教程 - 知乎 (zhihu.com)，但由于是在 WSL2-Ubuntu 上，细节有所不同。 1. 安装 v2ray-core 和 v2rayA这一步直接参考 v2rayA 官方文档： Debian / Ubuntu - v2rayA “安装 V2Ray 内核 / Xray 内核” 一步，选择 “ v2rayA 提供的镜像脚本（推荐）” 1234# 下载并执行 v2raya 提供的脚本curl -Ls https://mirrors.v2raya.org/go.sh | sudo bash# 关闭 v2ray 自启动sudo systemctl disable v2ray --now “安装 v2rayA” 一步，选择 “方法一：通过软件源安装” 1234567# 添加公钥wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/trusted.gpg.d/v2raya.asc# 添加 V2RayA 软件源echo &quot;deb https://apt.v2raya.org/ v2raya main&quot; | sudo tee /etc/apt/sources.list.d/v2raya.listsudo apt update# 安装 V2RayAsudo apt install v2raya “启动 v2rayA / 设置 v2rayA 自动启动” 1234# 启动 v2rayAsudo systemctl start v2raya.service# 设置开机自动启动sudo systemctl enable v2raya.service 在普通的 Ubuntu 系统下，这一步到这里就完成了。但在 WSL2-Ubuntu 下，使用 systemctl 命令会遇到 12System has not been booted with systemd as init system (PID 1). Can't operateFailed to connect to bus: Host is down 这样的报错，这是由于 WSL2 本身是由 Windows 负责运行的，因此使用 tree 或 ps 命令时会看到根进程不是 systemd，这将导致无法启动 Linux 系统服务的守护进程(deamon)。当我们执行 systemctl 命令的时候，会显示出我们的 init system (PID 1) 并非 systemd，而是微软提供的 /init。 引自：WSL2 的 Linux 中运行 systemctl 命令 - 知乎 (zhihu.com) 解决方法是使用 gdraheim/docker-systemctl-replacement (github.com) 提供的替代脚本，因为这个脚本基于 python2，所以先安装 python2。具体命令如下： 123456apt install python2 sudo mv /usr/bin/systemctl /usr/bin/systemctl.oldcurl https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl.py &gt; tempsudo mv temp /usr/bin/systemctlsudo chmod +x /usr/bin/systemctl 如果连接不上 raw.githubusercontent.com 的话，可以先用浏览器下载到本地，再传输到 wsl2 的文件目录里。 这样就可以正常使用 systemctl 命令了。 2. 从 v2net 购买境外节点Portal Home - V2NET (v2ray.cx) 可以选择自己适用的类型，一般来说 10GB / 20GB 的 Plan 就足够了。 购买可以使用支付宝，完成后点击个人主页上刚购买的产品，打开 “订阅地址”， 复制 Linux 的订阅地址，待下一步使用。 3. 配置 v2rayA打开浏览器，输入127.0.0.1:2017 打开 v2rayA 的配置界面。 注册完成后，点击 “Import”，如下 输入刚刚的订阅地址，接下来在 V2SUB.COM 标签页中就会出现所有可用的服务器节点。勾选左上角全选，点击 HTTP，测试连通性和时延： 点击 Operations 中的 Select， 选择所有你需要的节点，此时所有的选中项应该都是粉红色的，鼠标移到左上角的 Ready 处，按钮会变为 Start，点击后即可启动代理服务，此时所有选中项变为蓝色。 点击右上角的 setting，打开弹窗里左下角的 address and ports，即可查看不同协议对应的端口号，如 socks5 协议的代理端口是 20170，http 协议的代理端口是 20171。 4. 配置代理(1) 若不开启透明代理如果保持 v2rayA 的默认配置，不开启透明代理，则需要针对不同的服务分别配置。 浏览器使用 SwitchyOmega 浏览器插件，支持 Chrome 和 Firefox: Releases · FelisCatus/SwitchyOmega (github.com) Git使用下面的语句配置 git 的 http 代理： 123# 注意端口号不一定是20171，根据实际而定git config --global http.proxy 'http://127.0.0.1:20171'git config --global https.proxy 'http://127.0.0.1:20171' 使用下面的语句取消代理： 12git config --global --unset http.proxygit config --global --unset https.proxy (2) 开启透明代理点击右上角 设置 ，第一栏 透明代理 / 系统代理 中选择 启用：大陆白名单模式。 此时系统所有流量将自动经过代理，不需要手动配置，非常方便。","link":"/WSL2%E6%90%AD%E5%BB%BAv2Ray%E4%BB%A3%E7%90%86/"},{"title":"Windows 下使用 Anaconda 安装 Tensorflow2","text":"该教程使用 Anaconda 在 Windows 下配置基于 GPU 的 Tensorflow2 的运行环境。优点是不需要手动下载 NVIDIA CUDA 等底层支持包，一键安装；缺点是只支持 tf2.1 及以下的版本，conda 在安装高版本的 tf 不会自动补全显卡依赖。所以如果需要使用基于 GPU 的高于 2.1 版本的 tensorflow，建议按照 Tensorflow GPU支持 手动安装 NVIDIA Driver, CUDA, cuDNN SDK 等依赖。 一、安装 Anaconda略，请自行查阅相关资料，尽量安装最新版。 二、创建并进入虚拟环境1、 conda create 命令创建虚拟环境1conda create --name tensorflow python==3.7 命令中的 tensorflow 是你新创建的环境的名字，你也可以改成其他名字例如 tf2，new_env 等等。 根据官网的指示，使用 tensorflow2 的 python 版本应当大于 3.5 如果使用 python 3.8，那么 Tensorflow 版本要大于 2.2 2、conda activate 命令进入创建好的虚拟环境1conda activate tensorflow 3、其它命令退出当前虚拟环境 1conda deactivate 查看所有环境 1conda info --envs 删除环境 1conda remove --name tensorflow --all 三、在虚拟环境中安装 Tensorflow2如果你的显卡是 NVIDIA 的，而且性能还可以，就建议安装 gpu 版本的 tensorflow，否则安装 cpu 版本的 tensorflow。 1conda install tensorflow-gpu==2.1 这一步要确保在新创建的虚拟环境中进行。 我在这一步遇到了网络的问题，报错信息如下： 123456789Traceback (most recent call last): File &quot;C:\\Users\\DELL\\anaconda3\\lib\\site-packages\\conda\\core\\subdir_data.py&quot;, line 371, in _load raw_repodata_str = fetch_repodata_remote_request( File &quot;C:\\Users\\DELL\\anaconda3\\lib\\site-packages\\conda\\core\\subdir_data.py&quot;, line 808, in fetch_repodata_remote_request raise Response304ContentUnchanged() conda.core.subdir_data.Response304ContentUnchanged During handling of the above exception, another exception occurred: ······ 看了这篇博客 Conda无法安装或更新的问题 - 简书 (jianshu.com)，用下面指令清空缓存 1conda clean -i 后解决了问题。 不过这个错误似乎是因为我先挂了 VPN 再断开，导致网络里某些设置出错，大部分情况下应该不会出现这个问题。 四、测试安装是否成功在当前虚拟环境下输入 python，进入代码交互模式，此时最前面应该是 &gt;&gt;&gt; 符号 对于安装的 gpu 版本的 tensorflow，输入以下代码 12import tensorflow as tf tf.config.list_physical_devices('GPU') 我的计算机上的输出为 1234567891011121314&gt;&gt;&gt; tf.config.list_physical_devices('GPU')2021-06-25 19:22:10.512386: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll2021-06-25 19:22:10.559058: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1555] Found device 0 with properties:pciBusID: 0000:01:00.0 name: NVIDIA GeForce GTX 1650 Ti computeCapability: 7.5coreClock: 1.485GHz coreCount: 16 deviceMemorySize: 4.00GiB deviceMemoryBandwidth: 178.84GiB/s2021-06-25 19:22:10.559491: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_101.dll2021-06-25 19:22:10.565249: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_10.dll2021-06-25 19:22:10.571576: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_10.dll2021-06-25 19:22:10.574451: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_10.dll2021-06-25 19:22:10.580182: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_10.dll2021-06-25 19:22:10.583537: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_10.dll2021-06-25 19:22:10.595823: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll2021-06-25 19:22:10.596527: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1697] Adding visible gpu devices: 0[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')] 安装成功！","link":"/Windows-%E4%B8%8B%E4%BD%BF%E7%94%A8-Anaconda-%E5%AE%89%E8%A3%85-Tensorflow2/"},{"title":"v2rayA教程","text":"V2Ray 核心使用的是 v2fly/v2ray-core: A platform for building proxies to bypass network restrictions. (github.com)； V2Ray 客户端使用的是 v2rayA/v2rayA: A web GUI client of Project V which supports V2Ray, Xray, SS, SSR, Trojan and Pingtunnel 🚀 (github.com)； 购买境外节点使用的是 Portal Home - V2NET (v2ray.cx) 这篇文档和另一篇 WSL2搭建v2ray代理有重复，后续会合并 1. 安装 v2ray 支持的客户端Linux 和 Windows 端这一步直接参考 v2rayA 官方文档： Debian / Ubuntu - v2rayA。v2rayA 是一个跨平台且基于网页配置的 v2ray 客户端。不过没梯子官网应该打不开。所以直接把整理后的内容贴在下面。 （1）Linux 端v2rayA 的功能依赖于 V2Ray 内核，因此需要安装内核。 “安装 V2Ray 内核 / Xray 内核” 一步，选择 “ v2rayA 提供的镜像脚本（推荐）” 1234# 下载并执行 v2raya 提供的脚本curl -Ls https://mirrors.v2raya.org/go.sh | sudo bash# 关闭 v2ray 自启动sudo systemctl disable v2ray --now “安装 v2rayA” 一步，选择 “方法一：通过软件源安装” 1234567# 添加公钥wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/trusted.gpg.d/v2raya.asc# 添加 V2RayA 软件源echo &quot;deb https://apt.v2raya.org/ v2raya main&quot; | sudo tee /etc/apt/sources.list.d/v2raya.listsudo apt update# 安装 V2RayAsudo apt install v2raya “启动 v2rayA / 设置 v2rayA 自动启动” 1234# 启动 v2rayAsudo systemctl start v2raya.service# 设置开机自动启动sudo systemctl enable v2raya.service 安装完成后，在浏览器中输入 http://localhost:2017 打开 v2rayA 界面。 （2）Windows 端本节介绍如何在 Windows 上安装 v2rayA。需要注意的是，目前在 Windows 上仅支持一键配置系统代理而非透明代理。 方法一：通过 WinGet 自动安装WinGet 是微软推出的软件包管理器，适用于 Windows 10 以及更新版本的操作系统。 1winget install --id v2rayA.v2rayA 方法二：手动运行安装包从 GitHub Releases 下载适用于 Windows 的安装包，例如 installer_windows_inno_x64_2.0.1.exe，按照指示安装完毕即可。 通过安装包安装 v2rayA 后，v2rayA 将以服务的形式运行，默认情况下将开机自启，你也可以在任务管理器中的“服务”选项卡管理 v2rayA 的启动与停止。你可以通过运行桌面快捷方式或直接访问 http://127.0.0.1:2017 打开管理页面。 （3）iPad 和 iPhone和上面不太一样，iPad 和 iPhone 上无法使用 v2rayA，需要先从外区的 App Store 下载 Shadowrocket 软件（图标是个起飞的小火箭），用这个软件配置代理，流程比较复杂。 先注册外区的苹果账号，用它登录苹果商店 Shadowrocket 是付费软件（似乎是 3 美元），但是国内 IP 登外区苹果商店没法用信用卡付费支付，买不了 参考这篇：手把手教你购买充值，美区Apple ID礼品卡 - 知乎 (zhihu.com)，买个礼品卡，用礼品卡支付购买 把 Shadowrocket 下载下来，这一步就完成了 2. 从 v2net 购买境外节点Portal Home - V2NET (v2ray.cx) 网站好像被墙了，这一步不挂梯子还是上不去，可以先借别人的梯子一用，自己买了再切换成自己的。。。 可以选择自己适用的类型，一般来说 10GB / 20GB 的 Plan 就足够了。 购买可以使用支付宝，完成后点击个人主页上刚购买的产品，可以看到有不同平台和不同客户端对应的订阅地址。 Linux 和 Windows 统一使用 Windows-V2RayN 的订阅地址；iPad &amp; iPhone 使用 iOS-Shadowrocket 的订阅地址。 3. 配置 v2rayA（1）Linux &amp; Windows打开浏览器，输入127.0.0.1:2017 打开 v2rayA 的配置界面。 注册完成后，点击 “Import”，如下 输入上一步得到的订阅地址，接下来在 V2SUB.COM 标签页中就会出现所有可用的服务器节点。勾选左上角全选，点击 HTTP，测试连通性和时延： 选择 Latency 尽可能小的节点，点击 Operations 中的 Select， 选择所有你需要的节点，此时所有的选中项应该都是粉红色的，鼠标移到左上角的 Ready 处，按钮会变为 Start，点击后即可启动代理服务，此时所有选中项变为蓝色。 点击右上角 “设置”，在 “透明代理/系统代理” 选中 “启用：大陆白名单模式”，可以应对绝大部分场景。少部分特殊场景需要额外配置，此处不赘述。 （2）iPad &amp; iPhone打开 Shadowrocket，点击左上角的扫描图标，扫描第二步最后 iOS-Shadowrocket 的 “订阅 QR 码”。 测试各节点时延，选择时延最短的，打开最上方一行连接开关即可。 成功后设备右上角会显示 VPN 图标。","link":"/v2rayA%E6%95%99%E7%A8%8B/"},{"title":"《绘画与观看》课堂笔记","text":"以下是2021年秋季学期《绘画与观看》最后两节课的一些笔记，这是我在清华选上的第一门艺术类课程，收获颇丰。（不要问我为什么只记了最后两讲，问就是因为懒） 第十四讲：艺术的审美与转型大卫·霍克利 图像：画家-&gt;摄影师-&gt;每一个人 人的生命如果有周期，生命是相对的，那么这个周期有不同的阶段特征。中西方各个周期的特征是非常相像的。 特殊性，普遍性 20世纪上半页的“内卷现象”，找不到出口，各种主义打架 美国成为世界老大，艺术从巴黎跑道纽约，“内卷”消散，波普艺术等开始成为主流。 当代性特征：19世纪后至20世纪前，以及从二战后到如今。文艺复兴后转变的过程。 1、对美的疑问维纳斯只是古希腊美女的一个普遍性的概括，其实不存在 马蒂斯：《戴帽子的妇人》 乔治·陆奥：《春》这两个画家都被称为野兽派。 19世纪中叶，眼光从天国转到地上，丑/不美 也被艺术家开始呈现。现实主义是一种眼光，对真实的观察，而不是一种绘画技巧。 内心、情绪、真实的自我。 西方已经找不到中规中矩表现“美”的艺术家了 毕加索早期的素描也很学院风，很经典，但从中期以后开始立体主义 1917年的《泉》，杜桑，法国艺术家 杜桑 1919年 给蒙娜丽莎加上了山羊胡子 安格尔的《泉》，古希腊的美 总结：从19下半叶开始，随着科学技术发展，世界观变化。 看世界的方式发生了变化，不再依赖于焦点透视 歪曲、丑化、替换、调侃。阻断人以前的审美经验，割断十全十美的古典审美，重新面对真实世界， 2、抽象与波普世界艺术史内，波普艺术还存在，一代两代三代。。。 抽象艺术非常小众了。 格林伯格：音乐必须像音乐，绘画必须像绘画。绘画的标准就是平面的，二维的。 古人告诉你，这儿是一个通往天国的舞台，对人起到洗脑和教育意义。 波普艺术，没有“创作”，直接拿来画报、产品说明书，展现美国的消费场景，消费生活，都是一次性的，所谓的崇高，所谓美，和日常用品的差距就越来越小。古代的名画、经典符号都可以拿来当包装纸。 安迪沃霍尔，绘画给老百姓看，艺术家不再是高高在上的， 抽象和波普艺术：一个想奔向天国，一个想奔向消费，民间，世俗。孪生兄弟走上了不同的方向。20世纪的两大奇观 ↑ 3、观念与符号话语构建显示 福柯：话语限定物，反过来讲，限定物的话语，规训的语言，权利的语言。话语的作用性之大。《这不是一个烟斗》文本的存在和图像的存在可以相反 克瑟斯：三把椅子（符号、实际、照片），三种存在的东西构建了罗兰巴克说的实际上真实的三种存在：图像、话语、物品本身 人们通过图像和话语对物品有所接触，物体本身不再重要 今天的世界，从图像的层面，从话语的层面看到了两种真实的存在，这两种存在是被高度符号化的。语言的规则，我们生活在世界上，运用了老祖宗定下的规则，规则是先天的，符号是可以替换的。“我爱你”通过符号的替换可以不断提高信息的刺激力 质疑-&gt;内卷-&gt;输出 柏拉图的精神：理念可以决定一切，可以支撑一切 亚里士多德：理、实物、表象和和谐统一的 19世纪画家，艺术的美来源于自然，又高于自然的美 丑化、扭曲、替换 符号的打散、组合，衍生新的意义 以前：艺术家和公众直接交流，沙龙模式 如今：资本模式，公众和艺术家无直接交流，资本收藏艺术品 现代没有人教你素描、技巧，都是教观念 通过对西方当现代艺术的描述，以及中国山水画发展的周期，虽然时间短不一样，但是有普遍性的对应。元代之前是重要的技术构建时期，技术方式已经定型，西方的技术构建时期300年，中国500年，魏晋时期开始到宋基本完成，描、皴。 19至20世纪上半叶，是语言转换阶段，语言方式不一样。元四家也是这个时期，（画的还像个人）之后人就不像人了 变成孤立的，一个个的，有指向性的符号，中国是清代，四王也是符号化。我称之为系统的周期性变化，青年特征（学习），中年特征，老年特征（固执，狂妄）。文化系统中都会存在这个周期性变化。 下一节课讲错周期现象 第十五讲：错峰的周期上节课将观看方式的差异，下方文艺复兴后如何构建观看方式，又如何被印象派推翻，所谓的当代艺术（今天我们对当代的理解并不是一致的）。 这节课里，找到观看方式的某种源头,DNA似的。这个课不是仅仅讲如何欣赏美，重点是分析，不仅仅是感受性的描述 统治世界的：除了物理性的客观的存在，还有话语性的存在，看不见，但是感觉到它的力量。还有图像，当今主要来源就是图像。 作业一定是一个判断、一个分析，重要是判断能力，分析能力。 1、他山之石：德先生与赛先生19世纪末20世纪除，中国历史出现裂变、转型、时间节点。重大的变化 1851年伦敦万国工业博览会，水晶宫，工业化的建筑，西方工业革命以来的所有成果。英国邀请中国参加，李鸿章拒绝。 第一次鸦片战争到第二次鸦片战争，失衡，中国日益衰落，西方蒸蒸日上。清政府尝试改良，1860年洋务运动，比明治维新还要早。 中国从向日本学习开始，荷兰成了世界马车夫，住在海洋贸易通道，西方文艺复兴的科学知识，天文物理逐渐传到日本，日本的知识分子很大震动。司马江汉，江户时期的天文学家，最初向中国学习，逐渐把学习重点挪到了西方。黑田清辉创立白马会，“在阳光底下写生”。 西方“维纳斯”绘画、雕塑里故意将人的四肢拉高，黑田清辉的《智、感、轻》也是这样，改造的不仅是科学技术，还有文化、人种，希望“脱亚入欧”。 川端美术专科学校接收了很多中国留学生。启蒙运动，破坏君权神授，德拉克罗瓦“自由引导人民”， 康有为奇葩在：想维系皇权的保守的维新人士，三次乡试，百日维新又失败。张勋复辟，又参加辫子军的争辩，希望能当上宰相。失败后逃到美国公使馆，政治上一辈子失意，写下《万木草堂藏画目》。唯一实现的就是绘画艺术上的抱负。但是他提出：中国绘画艺术必须走写实的道路。 陈独秀 “打倒四王，必用写实主义”，鼓吹德先生、赛先生。其主张与康有为是一致的。1919年时，五四运动。真正付诸行动的是两个人：林风眠和徐悲鸿。林：“介绍西洋艺术，整理中国艺术，调和中西艺术，创造时代艺术”。林风眠1925年从法国留学回来，蔡元培钦点的，北平艺专的… 。蔡元培给徐悲鸿安排了南京的中央艺术大学职位。徐悲鸿的… 。两个人代表了两种发展，林风眠还是在西方印象派基础上的引入和介绍，强调型，他再整理、调和中国艺术上身体力行，是一个很好的画家，但不一定是很好的老师。徐悲鸿”素描是一些造型的基础“，《九方皋》的马有光影、结构、透视，都在画面上，和传统国画不一样，是平面的。 在徐悲鸿和林风眠两个人之间，五四运动，中国的启蒙运动，陈独秀倡导的德先生、赛先生，徐选择了赛先生。徐悲鸿1945年就任北平国立艺专校长，代表赛先生，代表了科学的一路。中国需要这东西。德先生的到来是中国19世纪初的最重要的东西。理性精神的吸收，这恰恰是中国传统闭关自守的弱项，取长补短，有选择地接收。 2、现实主义之路巴比松、库尔贝，现实主义具有批判性，在技法层面安上没有多大区别，将眼光落到了日常劳动的农民、工人，从皇权转向了平民阶层。米勒《拾穗者》。 1931年鲁迅，介绍德国的珂勒惠支，版画表现下沉的、普通的劳动人民，表现人性的力量，通过“木刻讲习会”，培养了中国新的艺术力量，版画可以复制，具有宣传的力量， 蒋兆和：表现贫苦人民的现状，与杜甫的 “朱门酒肉臭，路有冻死骨” 类似。1942年延安文艺交流会，在毛泽东，指出中国艺术在特殊时期必须明确方向：艺术要为大众服务。学习光影等只是技术性的学习，必须要找到中国艺术在本土生长的路径，要画劳苦百姓。这是不同于西方的中国的独特的选择。 韩国、日本按照西方艺术的节奏在走，接收了赛先生和德先生 中国只接受了赛先生。这是符合历史规律的，是人类艺术史里面自然地在中国发货所能的另一种故事。 3、提问讨论透过现象看到绘画的内在。绘画作为一种现象呈现给我们的时候我们 中国的改革开放前，只知道安格尔、德拉克洛瓦。开放后所有艺术一股脑全过来，中国在改革开放后，对文革时期的产生一种反思，伤痕美术、伤痕文学。囫囵吞枣，消化不良，通过中国的文化土壤，过滤了一部分，如行为艺术等。也出现了一些新的，如公共艺术，与城市化改造是结合起来的。本质上是对西方艺术的回响。 4、总结从原来的欣赏之美，对自然的欣赏，对艺术的欣赏。今天，不是去欣赏、去懂，而是知道如何去审美， 从自然之美，到艺术之美，到审美之美。 康德：不是理性判断，而是情感判断， 模仿之美：从大自然中提取出来，被艺术家们表现。 现在，产生迷惑：这个东西美吗？比情感判断更深一层的逻辑，理性判断。 具有普遍性，无功利性。 审美判断的第一个条件：普遍性 对审美判断的第二个条件：无功利性、无利害行 今天我们需要更谨慎的立场，更多的知识去判断。在知性的层面判断艺术品是不是好的。不再是评价 “美不美” 了。好的艺术品也可能是丑的。这张画虽然不美，但是它是好的艺术品。真实之美。 好的艺术首先是真诚的，带有意义的，是能被大家承认意义的。形式，形式带来的美感， 好的艺术，在人和自然里寻找自己的位置，感到自己的渺小，虽然渺小，但又渴望自己能做些什么 审美的概念变了。 福山《历史的终结与最后的人》，历史的最终端是人的精神的自由，原来的审美叙事终结了。历史的终结是黑格尔提出的，福山将其发扬光大了。黑格尔 “历史的起源在东方，准确来说是在中国。” 他认为中国是整个文明史的起源，但是落在欧洲，西方吸收了各文明的力量，形成了太阳，历史在这里终结。 所有西方人基本还会透视法的出发点。19世纪初的预言：我们的西方还有美洲大陆，那边可能会出现新的历史。 中国的观看方法不是线性的，生命是循环的，中国不会用否定之否定，中国是内陆型的文明体，西方是海洋性的文明体。中国一辈子求的就是安定。农耕社会。士农工商。 文艺复兴的焦点透视是“从我的角度看世界”，对人的深刻认识，我是谁，“我思故我在”，对“我”自身的反思产生了缺陷的认识。“我” 需要自我救赎，产生理性的力量，认识到自己的不足。汽车是腿的延长，眼镜是视力的延长。工具理性。这是西方的。 对于中国，最重要的是直观，体悟，外师造化，中得心源。追求整体，西方是二分法，中国不要光影，追求形的完整。 观看之道、审美之美。周期。焦点透视。我走开了，你走到我的位置，看到的东西是一样的。即便毕加索搞立体主义，本质还是焦点透视，立场是不变的。 太阳从中国升起，落到欧洲；从欧洲升起，落在美国；在美国升起，又落回中国。 黑格尔：将中国艺术称为象征性艺术（史前艺术）。古希腊艺术是古典性艺术，形统一。浪漫型艺术：人自由表达自己的情感，贝多芬等（黑格尔自己所处时代的艺术）。 中国的古典艺术在唐宋，如何看待世界，属于古典型艺术，是艺术的青年期。 艺术的中年期：稍微有些随心所欲，成熟了，浪漫型艺术，19世纪法国印象派，德国20世纪初表现主义艺术。具象的 这个历史可能因为生命的某种属性而变得可以从头再来。 建议大家看看 梁启超“少年中国说”。少年强，中国强。19世纪末20世纪初，中国没落腐朽。太阳重新照耀中国。","link":"/%E3%80%8A%E7%BB%98%E7%94%BB%E4%B8%8E%E8%A7%82%E7%9C%8B%E3%80%8B%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"},{"title":"一键下载网易云歌单","text":"如果从网易云音乐内部直接下载，得到的是 ncm 文件，无法用其它音乐播放器打开，如果想要得到 mp3 格式的歌曲，则需要去一些特殊的下载网站，如 https://music.zhuolin.wang/， 手动搜索歌名然后下载，效率低下。 因此我实现了一个只需要输入网易云歌单链接就可以直接下载歌单内所有歌曲的程序，在此记录下使用方法和代码原理。 1、使用方法运行 auto_download.exe 程序，会提示 “输入网页版歌单的链接”。打开网易云网页版，点开自己或者其他人创建的歌单，例如我创建的 Eason 的歌单，如下： 复制搜索框内的地址，此处为https://music.163.com/#/my/m/music/playlist?id=4974062786，粘贴至命令行内，回车。接下来会列出该歌单内的所有歌曲（上限1000首），输入 y 按回车即开始下载，输入 n 按回车即取消下载。 如果遇到资源失效的歌曲，会提示 “资源已失效，跳过下载”； 如果遇到 VIP 专享的资源，那么只会正常下载前面的一小段，不会报错，所以等全部下载完成后删除文件大小明显过小的歌曲就可以了。 2、原理介绍（1）提供向网易云官网访问所需的 cookie12345678headers = { 'Host': 'music.163.com', 'Referer': 'https://music.163.com/', # Cookie 和 User-Agent 字段太长了，此处只截取前面一部分，具体请到我的 github 查看 'Cookie': 'nts_mail_user=yangding19thu@163.com:-1:1; &lt;...&gt; ', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) &lt;...&gt; ', 'Accept': '*/*' } 如果不提供 cookie，也能获取到歌单中歌曲的 id，但是只提供前10首，因为它认为你是一个未登陆的用户。只有加上了 cookie，网易云音乐网站才会认为你是一个已登陆的用户，向你提供该歌单全部歌曲的 id。 【Cookie 的获取方法】：以 Edge 浏览器为例，打开网页版网易云音乐界面，登录你的账号。然后按快捷键 Ctrl + Shift + I ，打开开发者工具，选择 网络 标签页，在搜索框中输入 config，刷新网易云音乐页面，点击搜索结果的第一条 config?csrf_token=... ，从里面可以复制出 Cookie，User-Agent 等字段的信息。如下图： 将你的 Cookie，User-Agent， Accept 等信息填入 headers = {} 里面就可以了。 在这个过程中，我遇到了一个错误，大意是由于 Cookie 字段中存在不可解码的字符，导致程序无法运行，于是我将 Cookie 字段中包含中文的部分删除，便可以正常运行了。所以我猜测可能只需要提供一部分 cookie 就可以让服务器认出你来，而非一定要提供完整的 cookie。 【补充】：经测试，不是每台电脑只能用自己的 cookie，而是你拿任何一个人的 cookie 填进去都可以获得网易云音乐网站服务器的许可，所以你直接运行我的程序是没有任何问题的。 （2）读取歌单链接123url = input(&quot;输入网页版歌单的链接\\n&quot;)url = url.replace('/#/', '/')url = url.replace('/my/m/music/', '/') 去掉歌单链接中无用的部分 （3）获取并打印歌单中所有歌曲的 id 和名字1234567891011121314response = requests.get(url=url, headers=headers)html = response.content.decode(encoding=&quot;utf-8&quot;)soup = BeautifulSoup(html, 'lxml')results = soup.find('ul', {'class': 'f-hide'})results = results.find_all('a')print(&quot;将要下载的歌单为：{}\\n&quot;.format(soup.find('title').text))print(&quot;包含如下歌曲：&quot;)cnt = 0for music in results: cnt += 1 print(&quot;{}. {}&quot;.format(cnt, music.text)) html 是歌单链接对应的网页的内容，Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库。具体用法可查阅文档： Beautiful Soup 4.4.0 文档 — Beautiful Soup 4.2.0 中文 文档 手动将 html 的内容复制出来，在一个示例中，html 文件中含有歌曲id和名称的部分如下： 1&lt;ul class=&quot;f-hide&quot;&gt;&lt;li&gt;&lt;a href=&quot;/song?id=29567190&quot;&gt;梦中的哈德森&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/song?id=421563096&quot;&gt;我们的时光&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/song?id=421423203&quot;&gt;背影&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/song?id=29567189&quot;&gt;理想&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/song?id=456185373&quot;&gt;成都 (Live)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/song?id=459159128&quot;&gt;理想 (Live)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/song?id=461811714&quot;&gt;三十岁的女人 (Live)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/song?id=202373&quot;&gt;南方姑娘&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/song?id=1410021043&quot;&gt;小人物&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/song?id=460628183&quot;&gt;月亮粑粑 (Live)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 所以使用 12results = soup.find('ul', {'class': 'f-hide'})results = results.find_all('a') 这两句就可以获取所有歌曲的id和name。 （4）创建存储下载歌曲的文件夹12path = './auto_download/'+ curr_timePath(path).mkdir(parents=True, exist_ok=True) 在当前路径下创建 auto_download 文件夹，在其中又创建以现在日期为文件名的子文件夹，如 ./auto_download/2022-02-24 （5）开始下载12345678910111213141516171819202122cnt = 0for music in results: cnt += 1 music_id = music['href'].split(&quot;=&quot;)[1] music_name = music.text music_name = re.sub('/|\\*|&quot;', ' ', music_name) music_name = music_name.replace(':', '：') music_name = music_name.replace('?', '？') music_name = music_name.replace('&lt;', '《') music_name = music_name.replace('&gt;', '》') music_name = music_name.replace('|', ' ') music_name = music_name.replace('\\\\', ' ') music_url = &quot;https://link.hhtjim.com/163/{}.mp3&quot;.format(music_id) print(&quot;进度{}/{}, 正在下载 &lt;{}&gt;&quot;.format(cnt, len(results), music_name)) try: urllib.request.urlretrieve(music_url, path + '/' + music_name + '.mp3') except urllib.error.HTTPError: print(&quot;资源已失效，跳过下载&quot;) 其中替换 music_name 一段是因为有些歌曲名称中含有非法的字符，在将下载好的文件保存到本地时会报错，所以用其它字符来替代它们。非法字符包含下面这些。 https://link.hhtjim.com 是外链转换工具，可以生成网易云、QQ、虾米、酷我等主流音乐平台的下载外链。 try ... except 一段是防止为了下载歌单中已失效的资源而出错，打断下载流程。 3、打包成 exe我使用的是 pyinstaller，一个用于打包 python 文件为 exe 可执行文件的包。 参考文档： Using PyInstaller — PyInstaller 4.9 documentation 使用命令 pyinstaller -F auto_download.py 即可，在当前路径的 dist 文件夹中就可以找到已经打包完成的 exe 文件。 4、源码和可执行程序下载源码地址：https://github.com/yang-d19/MusicDownload 可执行程序下载：https://github.com/yang-d19/MusicDownload/blob/main/dist/auto_download.exe 5、参考博客 Python下载网易云歌单歌曲_FORMAT-qi的博客-CSDN博客 python下载网易云音乐中某个歌单中的全部音乐_乐亦亦乐的博客-CSDN博客 Python打包EXE方法汇总整理 - 知乎 (zhihu.com) 在 Python 中的常见的几种字符串替换操作_爱穿格子裤的专栏-CSDN博客_python 字符串替换","link":"/%E4%B8%80%E9%94%AE%E4%B8%8B%E8%BD%BD%E7%BD%91%E6%98%93%E4%BA%91%E6%AD%8C%E5%8D%95/"},{"title":"使用VPN加速Git操作","text":"直接打开 VPN 只能加速网页浏览等场景，对于使用 Git 访问 GitHub 而言起不到效果。的确可以使用国内的 GitHub 镜像达到加速下载的效果，但是在某些情况下这样并不方便。比如你已经 clone 了远程仓库，需要 push 一些 change 上去；又或者你要用其他人写的，使用到 Git 相关操作的脚本，就需要全局搜索正常的 GitHub 网址替换为国内的 GitHub 镜像。 但是通过很简单的操作配置一下 gitconfig 文件，就可以使用 VPN 加速 Git 命令（当然前提是开了 VPN），下面将讲一下如何操作。 1、查询 VPN 代理的端口号首先查一下你的 VPN 走的是什么端口号，以我用的为例： 可以查到使用的 sock5 端口为 10011，使用的 http 端口为 11000。 忽略 switch 端口号，那个是专门用来给 Switch 下载游戏加速用的。 2、配置 Git可以选择走 http(s) 代理还是 socks5 代理 （1）使用 http(s) 协议12git config --global http.proxy 'http://127.0.0.1:11000'git config --global https.proxy 'http://127.0.0.1:11000' （2）使用 socks5 协议12git config --global http.proxy 'socks5://127.0.0.1:10011'git config --global https.proxy 'socks5://127.0.0.1:10011' 注意上面的端口号只是根据我查到的端口号给的示例，具体要结合你的实际情况修改。 （3）取消代理12git config --global --unset http.proxygit config --global --unset https.proxy （4）一些奇怪的坑根据我当时找的教程 Git 命令行使用代理 VPN - Fan Lu’s Blog (fanlumaster.github.io) ，这位作者说他使用 http 协议，发现没有效果，最后换成了 socks5，问题才得到解决。 而我恰恰相反，使用 socks5 完全没有效果，换成了 http 协议之后就可以了。 配置完成后，git pull 和 git push 的速度应该会得到大幅度的提升，从几十或几百 kb/s 飙升到几 mb/s 。 【注意！】 千万要记得使用 Git 执行与远程仓库的操作前要开 VPN，因为上面设置的是全局代理，不开 VPN 就完全没有连接。 3、查看配置完成的 gitconfig 文件一般在 C:\\Users\\你的用户名\\ 文件夹下，例如我的文件路径为 C:\\Users\\DELL\\.gitconfig，这是个隐藏文件，打开之后可以看到配置的效果。","link":"/%E4%BD%BF%E7%94%A8VPN%E5%8A%A0%E9%80%9FGit%E6%93%8D%E4%BD%9C/"},{"title":"使用网线连接树莓派开发","text":"本文介绍了在没有显示屏的情况下如何仅使用网线连接树莓派并查询树莓派的 IP 地址。该方法在很多博文中都有介绍，本文详细介绍了 Win11 系统下的操作流程，以及可能遇到的问题。 具体环境：Windows11，树莓派 4B，网线直连。 首先烧录树莓派系统，有很多资料，此处不再赘述。 树莓派上电后，用网线将树莓派与电脑连接。 打开电脑的 “设置” -&gt; “网络和 Internet”， 出现如上图的 “以太网” 连接信息，说明树莓派系统烧录成功，网线连接正常。 但是此时的树莓派既没有自己的 IP，也没有与 Internet 的连接，下面让我们改变这一点。 在 “网络和 Internet” 选项页中选择 “高级网络配置”，再点击 “更多网络适配器选项”，如下图： 在弹出的界面中，一个网络是与 Internet 连接的（若使用无线连接，则显示为 WLAN），一个网络（通常显示为 “以太网 + 数字”）是与树莓派连接的，如下图： 右击与 Internet 连接的网络（由红框标识），点击 “属性”，在 “共享” 选项卡中勾选 “允许其他网络用户通过此计算机的Internet 连接来连接”，然后在 “家庭网络连接” 中选择与树莓派连接的网络，在我的电脑上，即为 “以太网 2”，如下： 【注意】： 如果该项已经被勾选，请取消勾选后，点击确定。然后再次打开属性设置，勾选该选项，再在下方选择共享的网络。否则共享配置可能会不生效。 现在树莓派的网络已经能通过本地计算机与 Internet 通信，下面让我们为树莓派分配 IP 地址。 右击与树莓派连接的网络（由绿框标识），点击 “属性”，在 “网络” 选项卡中找到 “Internet 协议版本 4 (TCP/IPv4) ”，点击 “属性”，如下图： 在弹出的设置页中，勾选 “使用下面的 IP 地址”，按照下图填写： 理论上，只要 “IP 地址” 的前两位是 192.168 即可，后面两位可在 1 ~ 254 间任意填写，但是推荐按上图填写。经测试， “DNS 服务器地址” 不填写也没有问题，树莓派会自动使用本机与 Internet 连接网络使用的 DNS 服务器。 接下来，点击 Windows 徽标键，唤出 “开始” 界面，在搜索框输入 “cmd”，回车，打开命令行。输入 arp -a，在输出结果中找到 192.168.137.1 开始的部分，如下： 找到以 192.168.137 开头，且最后一位不是 255 的 IP 地址，这就是树莓派的 IP。 在命令行中输入 ssh pi@[树莓派的IP]，如 ssh pi@192.168.137.229，回车。 若询问 “Are you sure you want to continue connecting (yes/no/[fingerprint])?”，则键入 “yes” 并回车。 若询问 “pi@[树莓派IP地址]’s password: ”，则键入 raspberry 并回车。 pi 和 raspberry 分别是树莓派的默认用户名和初始密码 然后就可以愉快地玩耍树莓派啦！","link":"/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91/"},{"title":"小巧而实用的软件分享","text":"记录一下我的电脑中常备的几款好用的小工具。包括键鼠功能增强类，截图贴图类，文件搜索以及快捷打开软件类，还有其他一些常用的效率类工具。 Windows MouseInc 方便好用的鼠标手势软件，支持右键手势、边缘滚动、截图贴图、按键回显等功能。（2024年4月查看，该软件网站已经停止服务，建议考虑使用别的鼠标手势软件） 下载链接：耍下 (shuax.com) CapsLock+ 加强 Capslock 键功能的软件，配合 Capslock 键实现很多方便的快捷键功能。 下载链接：Capslock+ (capslox.com) Everything 界面简单，功能强大的文件索引软件。 下载链接：voidtools Wox WoX is a launcher for Windows that simply works. 需要注意的是 Wox 可能和 win11 有冲突，比如 Wox 如果选择了透明样式的主题，win11 的文件管理器会变得非常卡。 下载链接：Wox Mac SmoothScroll Mac 对鼠标的支持性一般，滚动不顺滑，这款软件对在 Mac 上使用鼠标有很大的加强作用。Win 下目测不太需要。 下载链接：SmoothScroll iCloud 云盘 文件、照片、密码同步一把好手。 如果你是苹果全家桶用户，那么强烈推荐；如果不是，建议忽略. iCloud for Windows 有很多 bug，且同步速度也不稳定。 Better Display Mac 设备连接某些显示器时，无法自由调节缩放，导致 UI 偏大或者偏小，Better Display 提供了自定义分辨率的功能，以及虚拟屏幕、画中画等其它功能。 下载链接：waydabber/BetterDisplay Karabiner Elements Mac 下自定义键盘映射的软件。我下载这款软件是因为外接键盘上的 Home, End 键在 Mac 上默认是页首和页尾，我希望将其映射成与 Windows 上相同的行首和行尾。在 Karabiner Elements Setting 中的 Complex Modification 一栏点击 “Add your own rule”，将如下配置输入进去保存即可。 1234567891011121314151617181920212223242526272829{ &quot;description&quot;: &quot;[单击]home和end对应行首和行尾&quot;, &quot;manipulators&quot;: [ { &quot;from&quot;: { &quot;key_code&quot;: &quot;home&quot; }, &quot;to&quot;: { &quot;key_code&quot;: &quot;left_arrow&quot;, &quot;modifiers&quot;: [ &quot;left_command&quot; ] }, &quot;type&quot;: &quot;basic&quot; }, { &quot;from&quot;: { &quot;key_code&quot;: &quot;end&quot; }, &quot;to&quot;: { &quot;key_code&quot;: &quot;right_arrow&quot;, &quot;modifiers&quot;: [ &quot;left_command&quot; ] }, &quot;type&quot;: &quot;basic&quot; } ]} 下载链接：Karabiner-Elements (pqrs.org) New File Menu 你是否习惯了 Windows 下右键就能新建文件的快捷操作？Mac 下一切以应用为中心的操作逻辑使得创建文件变得极不顺手。New File Menu 为 MacOS 也提供了跟 Windows 同样的右键新建文件的功能。在 App Store 中可以直接搜索下载。 下载链接：New File Menu on the Mac App Store 多系统通用 Snipaste 小巧方便的截图贴图工具，支持贴图分组、贴图隐藏和显示。在各类场景下都能发挥作用，强烈推荐！ 下载链接：Snipaste 滴答清单 兼具日历、任务清单、便签、打卡等等功能跨平台效率工具。界面也很好看。 下载链接：滴答清单:一个帮你高效完成任务和规划时间的应用 (dida365.com) 1Password 专业密码同步工具。还有浏览器插件， 下载链接：适用于家庭、企业、团队的密码管理器 | 1Password","link":"/%E5%B0%8F%E5%B7%A7%E8%80%8C%E5%AE%9E%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/"},{"title":"搭建我的博客系统","text":"我从2019年开始尝试搭建属于自己的博客平台，最开始是在博客园上创建了账号，体验还不错，不需要折腾，但是可定制性弱了些，后来了解到很火的 hexo 博客框架，于是使用 hexo 生成博客网页后在 github.io 发布。 但上 GitHub 有时会卡，于是考虑迁移到我自己用于做实验性项目的腾讯云服务器上。考虑到博客网站只需要展示静态资源，而且并发量肯定不大，用 Apache 和 NginX都没问题，我自己选用了 Apache ，有关如何配置自己的云服务器相关的内容，请查看我的另一篇博客：我的云服务器配置 1、安装和使用 hexohexo 是什么？这是官网的介绍： Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo generates static files with a beautiful theme in seconds. 具体的安装过程参照官网文档 Documentation | Hexo 即可。 需要注意的是，如果是在 Windows 下安装，要记得将 Node.js 添加至环境变量。 查看官方文档以了解基础的用法 Commands | Hexo 使用 hexo new 命令以新建文章或页面； 使用 hexo generate (可缩写为 hexo g) 以生成静态网站资源； 使用 hexo server (可简写为 hexo s) 以在本地打开服务器预览网站效果； 使用 hexo deploy (可简写为 hexo d) 以发布网站内容到指定站点上（下一节详细介绍） 2、发布网站接下来需要考虑将生成的网站资源发布到哪里，如果你没有自己的服务器或云服务器，那么可以在 github 上创建一个特殊的仓库（仓库名必须是 你的用户名.github.io ），如果你像我一样租了云服务器，也可以直接在服务器上运行 Web Engine，将内容发布到云服务器上。 （1）GitHub关于发布到 GitHub 上，我参考的是这篇文章： 个人博客第5篇——安装node.js和Hexo - 知乎 (zhihu.com)，也可直接参照官网文档：GitHub Pages | Hexo 。 （2）云服务器参照官网文档：One-Command Deployment | Hexo，我使用的是 SFTP 方式。 在 _config.yml 中修改参数，需要填写你的服务器的 IP 地址，用户名，密码等。下图是我的设置，可以作为示例。 因为我使用的是 Apache Web Engine，默认网页资源文件夹是 /var/www/html，所以 remotePath 设置为 /var/www/html 。 验证方式我使用的是 RSA 公钥私钥验证，将公钥复制到服务器上，在 privateKey 项填上本地的私钥文件路径即可。 123456deploy: type: sftp host: 101.42.xxx.xxx user: ubuntu remotePath: /var/www/html privateKey: C:/Users/DELL/.ssh/id_rsa 特别要注意的是，hexo-deployer-sftp 默认的 remotePath 居然是 /，即根目录，我第一次 deploy 时没有注意，结果上传的网站资源把我根目录下的许多文件直接覆盖掉了，我又没有备份，后来不得已重装了云服务器系统。 我在此处遇到一个问题，部署时报错 Error: Cannot parse privateKey: Unsupported key format，原因是服务器不支持新格式的密钥文件，解决方法是删除之前生成的密钥，改用ssh-keygen -m PEM -t rsa命令生成密钥。 解决方案参考： 使用hexo搭建博客 | 碳化铁的个人空间 (feccc.site) PS：在尝试将博客服务器从腾讯云迁移到AWS时，hexo d 报错 Connection Error: All configured authentication methods failed. 初步怀疑是服务器操作系统版本不同导致 sftp 连接错误，但是手动 sftp 又能正常连接，hexo d 却一直报错，困扰了我很久。 我手动查看 /var/log/auth.log，发现 hexo d 时，日志中出现 userauth_pubkey: key type ssh-rsa not in PubkeyAcceptedAlgorithms [preauth\\] 的报错，可见需要将 ssh-rsa 添加入 PubkeyAcceptedAlgorithms 中。解决方法如下： Add this line in /etc/ssh/sshd_config. 1PubkeyAcceptedAlgorithms=+ssh-rsa And then restart sshd service. 1$ sudo systemctl restart sshd 解决方案参考：openssh - SSH server gives “userauth_pubkey: key type ssh-rsa not in PubkeyAcceptedAlgorithms” 但是目前我仍未弄清楚为何手动 sftp 可正常连接，hexo-deployer-sftp 插件却不行。 3、购买域名如果你想让别人直接通过域名访问你的网站，可以买一个域名，我是在 阿里云万网 上购买的，一般 .top, .xyz 之类的域名会比较便宜。买完之后可以在阿里云的工作台找到刚买的域名，打开解析设置页面，添加 DNS 记录到你的 github.io 网站或个人云服务器的 IP 地址上。如果不了解 DNS 记录的基础知识，可以查看页面右上角 “如何设置解析?” 的帮助文档。 通过域名访问在国内的服务器需要备案，流程比较复杂，需要实名认证，提交备案资料，然后经历一周以上的审核流程，此处不再赘述。 如果嫌麻烦不想备案的，可以购买境外的云服务器资源，缺点是如果不挂梯子，访问速度会受影响。 4、设置 https 安全链接如果不为你的网站申请 https 证书，那么用户只能以 http 方式连接到你的网站，http 协议使用明文传输，存在安全隐患。这里，我通过 FreeSSL.cn一个提供免费HTTPS证书申请的网站 提供的 ACME 证书自动化申请与部署工具，来实现网站的 https 证书持久化管理。 （1）在域名解析控制台中添加 DCV 配置信息输入你的域名后，FreeSSL.cn 网站会提供如下的指示： 我使用的阿里云提供的域名解析服务，添加的一条 CNAME 记录如下： 添加完之后，点击 “配置完成，立即检测” 即可。 （2）在服务器上运行 acme 部署脚本 点击 “ACME 自动化快速入门” 查看详细操作说明，最后一步如下： 12345acme.sh --install-cert -d example.com \\--cert-file /path/to/certfile/in/apache/cert.pem \\--key-file /path/to/keyfile/in/apache/key.pem \\--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \\--reloadcmd &quot;service apache2 force-reload&quot; 要注意的是，每个选项后要填的路径不是证书现在所在的位置（因为这个位置可能随着版本更新发生改变），而是你希望三个证书文件被拷贝到的位置，比如我就把 cert-file, key-file, fullchain-file 三个文件放在了 /etc/apache2/acme-cert/ 的路径下（我用的是 ubuntu 系统，其它系统的 Apache 配置文件可能不在 /etc/apache2/ 下） （3）在 Apache 配置文件中添加证书文件路径打开 /etc/apache2/sites-available/default-ssl.conf，修改下面三项： 12345678910111213141516# A self-signed (snakeoil) certificate can be created by installing# the ssl-cert package. See# /usr/share/doc/apache2/README.Debian.gz for more info.# If both key and certificate are stored in the same file, only the# SSLCertificateFile directive is needed.SSLCertificateFile /etc/apache2/acme-cert/cert.pemSSLCertificateKeyFile /etc/apache2/acme-cert/key.pem# Server Certificate Chain:# Point SSLCertificateChainFile at a file containing the# concatenation of PEM encoded CA certificates which form the# certificate chain for the server certificate. Alternatively# the referenced file can be the same as SSLCertificateFile# when the CA certificates are directly appended to the server# certificate for convinience.SSLCertificateChainFile /etc/apache2/acme-cert/fullchain.pem 分别设置 SSLCertificateFile, SSLCertificateKeyFile, SSLCertificateChainFile 3项，具体的值与上一步三个证书文件被拷贝到的位置有关，根据自己的情况自行修改。 sudo a2enmod ssl 打开 SSL 模块； sudo a2ensite default-ssl.conf 使能刚刚修改的配置文件，此时·default-ssl.conf 文件被链接到了 sites-enabled 文件夹中； sudo service apache2 restart 重启 apache2； 解决方案参考：Configure Apache With TLS/SSL Certificate on Ubuntu 18 | HostAdvice 5、设置评论系统我选择的是 Valine 评论系统：介绍 | Valine 一款快速、简洁且高效的无后端评论系统。 以及基于 Valine 之上提供了更强的邮件通知和评论管理功能的 Valine Admin 系统：DesertsP/Valine-Admin: 🔥A simple comment system based on LeanCloud and Valine. (github.com) 详细设置流程请参阅 Valine Admin 配置手册 (deserts.io) 以及 Icarus用户指南 - 用户评论插件 - Icarus (ppoffice.github.io)，需要注意的是， LeanCloud 的界面似乎经过了改版，配置手册中部分设置项的描述和实际界面不太对得上。比如 ADMIN_URL 一项，即 “Web主机二级域名（云引擎域名）” ，LeanCloud 似乎不再提供 .avosapps.us 的域名，而是一定需要绑定自己的域名，如下图所示： 我自己的自定义环境变量设置如下图： 6、使用 typora 编写 blog博文中使用外部资源的方法可参考 Asset Folders | Hexo 和 hexojs/hexo-renderer-marked: Markdown renderer for Hexo (github.com)。 开启后可以在与 md 文件同名的文件夹中放入图片或动图等资源。 我将 _config.yml 中的 permalink 改成了 permalink: :title/ ,看着更舒服，这样点开不同文章的时候，url栏显示的就是 https://xxx/title/，不会再有很长的日期。 （1）正常显示图片为了让插入的图片在 typora 和网站上都正常显示，需要如下几个步骤： 首先，在 scaffolds -&gt; post 中添加如下设置。 1typora-root-url: ./ 这样，每次 hexo new XXX 生成的 md 文件中便带有这样的开头，在其中插入图片时，会类似于如下格式： 1&lt;img src=&quot;/title/xxx.png&quot;/&gt; 这样既能在 typora 中正常显示，生成 html 博文后又能正常在网页上显示。 如果不设置 typora-root-url，假如勾选了 文件 - 偏好设置 - 图像 - 图像语法偏好 - 优先使用相对路径 ，那么插入的图片会是如下格式： 1&lt;img src=&quot;title/xxx.png&quot;/&gt; 如果不勾选，那么会是如下格式： 1&lt;img src=&quot;D:/.../title/xxx.png&quot;/&gt; 两种格式生成html博文后都无法正常显示。 （2）在网站上显示数学公式用 $ 或者 $$ 在 typora 中编写的公式无法在网页中正常显示，此时需要在 icarus 主题中打开公式支持，参见：Icarus用户指南 - 其他插件 - Icarus (ppoffice.github.io)，我选择使用其中的 MathJax。 但是似乎公式的显示需要不少时间加载，速度不快。 某些主题不支持如 icarus 的内置公式插件开关，需要另寻方法。","link":"/%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"},{"title":"工作 Debug 日记","text":"TODO…","link":"/%E5%B7%A5%E4%BD%9C-Debug-%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"学期总结","slug":"学期总结","link":"/tags/%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/"},{"name":"年度总结","slug":"年度总结","link":"/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"name":"安装教程","slug":"安装教程","link":"/tags/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"name":"Tensorflow","slug":"Tensorflow","link":"/tags/Tensorflow/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"Codeforces","slug":"Codeforces","link":"/tags/Codeforces/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"留档备查","slug":"留档备查","link":"/tags/%E7%95%99%E6%A1%A3%E5%A4%87%E6%9F%A5/"},{"name":"Course Project","slug":"Course-Project","link":"/tags/Course-Project/"},{"name":"Jetson Nano","slug":"Jetson-Nano","link":"/tags/Jetson-Nano/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"STM32","slug":"STM32","link":"/tags/STM32/"},{"name":"PlatformIO","slug":"PlatformIO","link":"/tags/PlatformIO/"},{"name":"STM32CubeMX","slug":"STM32CubeMX","link":"/tags/STM32CubeMX/"},{"name":"VSCode","slug":"VSCode","link":"/tags/VSCode/"},{"name":"WSL2","slug":"WSL2","link":"/tags/WSL2/"},{"name":"Vim","slug":"Vim","link":"/tags/Vim/"},{"name":"WSL","slug":"WSL","link":"/tags/WSL/"},{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"},{"name":"绘画","slug":"绘画","link":"/tags/%E7%BB%98%E7%94%BB/"},{"name":"日常","slug":"日常","link":"/tags/%E6%97%A5%E5%B8%B8/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"树莓派","slug":"树莓派","link":"/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"},{"name":"效率","slug":"效率","link":"/tags/%E6%95%88%E7%8E%87/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"工作日志","slug":"工作日志","link":"/tags/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"}],"categories":[{"name":"Daily","slug":"Daily","link":"/categories/Daily/"},{"name":"Technology","slug":"Technology","link":"/categories/Technology/"},{"name":"Art","slug":"Art","link":"/categories/Art/"}],"pages":[{"title":"About","text":"My name is Ding Yang. I am currently working as a Software Engineer in the Planning and Control team at WeRide, where I focus on the development of lane-level planning and global navigation modules. I received my Master’s degree in Electrical and Computer Engineering from Cornell University and my Bachelor’s degree in Automation from Tsinghua University. My interests include robotics development, embedded systems, machine learning, and web development. I am proficient in programming languages such as C, C++, and Python. 我是杨鼎，目前在文远知行 (WeRide) 规划控制组担任软件工程师，主要参与车道级规划以及全局导航模块的开发。 我在康奈尔大学获得了电子与计算机工程硕士学位，在清华大学获得了自动化学士学位。 我感兴趣的领域包括机器人开发、嵌入式系统、机器学习以及网站开发。 我熟悉的编程语言包括 C, C++, Python.","link":"/about/index.html"}]}